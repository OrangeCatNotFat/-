[{"E:\\装修小程序\\decorate\\src\\index.js":"1","E:\\装修小程序\\decorate\\src\\App.js":"2","E:\\装修小程序\\decorate\\src\\reportWebVitals.js":"3","E:\\装修小程序\\decorate\\src\\components\\frame.js":"4","E:\\装修小程序\\decorate\\src\\components\\login.js":"5","E:\\装修小程序\\decorate\\src\\config\\apiconfig.js":"6","E:\\装修小程序\\decorate\\src\\components\\OrderTable.js":"7","E:\\装修小程序\\decorate\\src\\routes\\privateRoute.js":"8","E:\\装修小程序\\decorate\\src\\components\\findpwd.js":"9","E:\\装修小程序\\decorate\\src\\components\\home.js":"10","E:\\装修小程序\\decorate\\src\\components\\administrator.js":"11","E:\\装修小程序\\decorate\\src\\components\\case.js":"12","E:\\装修小程序\\decorate\\src\\components\\cate.js":"13","E:\\装修小程序\\decorate\\src\\components\\article.js":"14"},{"size":551,"mtime":1647786448611,"results":"15","hashOfConfig":"16"},{"size":834,"mtime":1648467048514,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1646301861997,"results":"18","hashOfConfig":"16"},{"size":10450,"mtime":1648527366210,"results":"19","hashOfConfig":"16"},{"size":6052,"mtime":1648129241036,"results":"20","hashOfConfig":"16"},{"size":66,"mtime":1647169822003,"results":"21","hashOfConfig":"16"},{"size":2299,"mtime":1647417548442,"results":"22","hashOfConfig":"16"},{"size":772,"mtime":1648387762747,"results":"23","hashOfConfig":"16"},{"size":9400,"mtime":1648128851892,"results":"24","hashOfConfig":"16"},{"size":7596,"mtime":1647785419813,"results":"25","hashOfConfig":"16"},{"size":15630,"mtime":1648343537941,"results":"26","hashOfConfig":"16"},{"size":21358,"mtime":1648526204385,"results":"27","hashOfConfig":"16"},{"size":18536,"mtime":1648551254240,"results":"28","hashOfConfig":"16"},{"size":13409,"mtime":1648641010389,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"cwmv05",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"33"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"33"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"33"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"33"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"33"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\装修小程序\\decorate\\src\\index.js",[],[],["82","83"],"E:\\装修小程序\\decorate\\src\\App.js",["84","85"],[],"import './App.css';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Frame from \"./components/frame\";\nimport {Findpwd} from \"./components/findpwd\";\nimport PrivateRoute from \"./routes/privateRoute\";\nimport {Administrator} from \"./components/administrator\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route path={\"/findPwd\"} component={Findpwd}></Route>\n                    <Route path={\"/home\"} component={Frame}></Route>\n                    <Route exact path={\"/\"} component={Login}></Route>\n                    {/*<PrivateRoute path={\"/home\"} component={Frame}></PrivateRoute>*/}\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","E:\\装修小程序\\decorate\\src\\reportWebVitals.js",[],[],"E:\\装修小程序\\decorate\\src\\components\\frame.js",["86","87","88"],[],"import React from \"react\";\r\nimport {Layout, Menu, Dropdown, Button} from \"antd\";\r\nimport {BrowserRouter, HashRouter, NavLink, Route, Switch} from \"react-router-dom\";\r\nimport {\r\n    AppstoreFilled,\r\n    BarsOutlined,\r\n    CaretDownOutlined, DownOutlined, FileTextOutlined,\r\n    GiftOutlined,\r\n    HomeOutlined, PictureOutlined, SettingOutlined, TagsOutlined, TeamOutlined\r\n} from \"@ant-design/icons\";\r\nimport OrderTable from \"./OrderTable\";\r\nimport Case from \"./case\";\r\nimport Home from \"./home\";\r\nimport Cate from \"./cate\";\r\nimport {Administrator} from \"./administrator\";\r\nimport Article from \"./article\";\r\n\r\nconst {Header, Content, Sider} = Layout;\r\n\r\nclass Frame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            key: 1 // 记录点击到了哪个页面\r\n        }\r\n    }\r\n\r\n    // 个人信息下拉框\r\n    DownMenu = () => {\r\n        return (\r\n            <Menu>\r\n                <Menu.Item key={\"1\"}>\r\n                    <a>退出登录</a>\r\n                </Menu.Item>\r\n            </Menu>\r\n        )\r\n    }\r\n\r\n    // 标签选项\r\n    TagSelectMenu = () => {\r\n        return (\r\n            // 编写onClick事件\r\n            <Menu>\r\n                <Menu.Item key={\"1\"}>清空标签</Menu.Item>\r\n                <Menu.Item key={\"2\"}>2</Menu.Item>\r\n            </Menu>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const key = this.state.key;\r\n        const pageTitle = [\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <HomeOutlined/>&nbsp;&nbsp;系统首页</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <BarsOutlined/>&nbsp;&nbsp;预约管理</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <GiftOutlined/>&nbsp;&nbsp;活动管理</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <TagsOutlined/>&nbsp;&nbsp;分类管理</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <FileTextOutlined/>&nbsp;&nbsp;文章管理</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <PictureOutlined/>&nbsp;&nbsp;案例管理</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <SettingOutlined/>&nbsp;&nbsp;企业信息管理</div>,\r\n            <div style={{color: \"rgb(147,147,147)\", fontSize: \"18px\", fontFamily: \"微软雅黑\"}}>\r\n                <TeamOutlined/>&nbsp;&nbsp;管理员管理</div>\r\n        ]\r\n        return (\r\n            // BrowserRouter表示使用了history模式的路由，必须放在最外层\r\n            <HashRouter>\r\n                {/*使用顶部——侧边栏——通栏的布局*/}\r\n                <div className={\"container\"}>\r\n                    <Header className={\"header\"}>\r\n                        <AppstoreFilled style={{color: \"white\", fontSize: \"30px\", marginTop: \"17px\", float: \"left\"}}/>\r\n                        <div style={{\r\n                            color: \"white\",\r\n                            fontFamily: \"微软雅黑\",\r\n                            fontSize: \"25px\",\r\n                            float: \"left\",\r\n                            marginLeft: \"30px\"\r\n                        }}>创客装修后台管理系统\r\n                        </div>\r\n                        <Dropdown overlay={this.DownMenu} trigger={[\"click\"]}>\r\n                            <a className={\"ant-dropdown-link\"} onClick={e => e.preventDefault()}\r\n                               style={{color: \"white\", float: \"right\"}}>\r\n                                {sessionStorage.getItem(\"username\")}<CaretDownOutlined/>\r\n                            </a>\r\n                        </Dropdown>\r\n                    </Header>\r\n                    <Layout style={{\r\n                        position: \"fixed\",\r\n                        width: \"100%\",\r\n                        height: \"91%\",\r\n                        overflow: \"auto\"\r\n                    }}>\r\n                        <Sider width={200} className={\"site-layout-background\"}\r\n                               style={{backgroundColor: \"white\", overflow: \"auto\"}}>\r\n                            <Menu mode={\"inline\"} defaultSelectedKeys={[\"1\"]} defaultOpenKeys={[\"1\"]}\r\n                                  style={{height: \"100%\", borderRight: 0}}\r\n                                  onClick={async key => {\r\n                                      await this.setState({\r\n                                          key: key.key\r\n                                      })\r\n                                  }}>\r\n                                <Menu.Item key={\"1\"} style={{marginTop: 0}}>\r\n                                    <NavLink to={\"/home\"}>\r\n                                        <HomeOutlined/>&nbsp;&nbsp;系统首页\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"2\"}>\r\n                                    <NavLink to={\"/orders\"}>\r\n                                        <BarsOutlined/>&nbsp;&nbsp;预约管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"3\"}>\r\n                                    <NavLink to={\"/active\"}>\r\n                                        <GiftOutlined/>&nbsp;&nbsp;活动管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"4\"}>\r\n                                    <NavLink to={\"/cate\"}>\r\n                                        <TagsOutlined/>&nbsp;&nbsp;分类管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"5\"}>\r\n                                    <NavLink to={\"/article\"}>\r\n                                        <FileTextOutlined/>&nbsp;&nbsp;文章管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"6\"}>\r\n                                    <NavLink to={\"/case\"}>\r\n                                        <PictureOutlined/>&nbsp;&nbsp;案例管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"7\"}>\r\n                                    <NavLink to={\"/info\"}>\r\n                                        <SettingOutlined/>&nbsp;&nbsp;企业信息管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                                <Menu.Item key={\"8\"}>\r\n                                    <NavLink to={\"/administrator\"}>\r\n                                        <TeamOutlined/>&nbsp;&nbsp;管理员管理\r\n                                    </NavLink>\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Layout style={{float: \"right\", marginLeft: \"1px\"}}>\r\n                            <div style={{\r\n                                width: \"100%\",\r\n                                height: \"40px\",\r\n                                backgroundColor: \"white\",\r\n                                float: \"right\"\r\n                            }}>\r\n                                <div style={{float: \"left\"}}>点击一个页面添加一个标签</div>\r\n                                <div style={{\r\n                                    width: \"130px\",\r\n                                    height: \"100%\",\r\n                                    float: \"right\",\r\n                                    borderLeft: \"2px solid rgb(240,240,240)\",\r\n                                    marginTop: \"4px\"\r\n                                }}>\r\n                                    <Dropdown overlay={this.TagSelectMenu}>\r\n                                        <Button type={\"primary\"} style={{\r\n                                            float: \"right\",\r\n                                            marginRight: \"10px\"\r\n                                        }}>标签选项<DownOutlined/></Button>\r\n                                    </Dropdown>\r\n                                </div>\r\n                            </div>\r\n                            <Layout style={{\r\n                                padding: \"20px 24px 50px\",\r\n                                minHeight: \"400px\"\r\n                            }}>\r\n                                <div>{pageTitle[key - 1]}</div>\r\n                                {/*导航栏旁边的区域*/}\r\n                                <Content className={\"site-layout-background\"}\r\n                                         style={{\r\n                                             marginTop: \"10px\",\r\n                                             backgroundColor: \"white\",\r\n                                             height: \"500px\",\r\n                                             overflow: \"auto\"\r\n                                         }}>\r\n                                    <Switch>\r\n                                        <Route path={\"/home\"} component={Home}></Route>\r\n                                        <Route path={\"/orders\"} component={OrderTable}></Route>\r\n                                        <Route path={\"/active\"}></Route>\r\n                                        <Route path={\"/case\"} component={Case}></Route>\r\n                                        <Route path={\"/article\"} component={Article}></Route>\r\n                                        <Route path={\"/info\"}></Route>\r\n                                        <Route path={\"/cate\"} component={Cate}></Route>\r\n                                        <Route path={\"/administrator\"} component={Administrator}></Route>\r\n                                    </Switch>\r\n                                </Content>\r\n                            </Layout>\r\n                        </Layout>\r\n                    </Layout>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Frame;\r\n\r\n","E:\\装修小程序\\decorate\\src\\components\\login.js",["89","90","91"],[],"import React from 'react';\r\nimport {Input, Button, Form, Row, Col, message} from \"antd\";\r\nimport {UserOutlined, LockOutlined} from \"@ant-design/icons\";\r\nimport {HOST, PORT} from \"../config/apiconfig\";\r\nimport \"../css/login.css\";\r\nimport axios from \"axios\";\r\nimport {BrowserRouter, NavLink, Route} from \"react-router-dom\";\r\nimport logo from '../logo.png';\r\nimport {Findpwd} from \"./findpwd\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \" \",\r\n            password: \" \"\r\n        }\r\n    }\r\n\r\n    loginFormRef = React.createRef(); // 与render函数中的登录表单进行绑定\r\n\r\n    login = async () => {\r\n        // 对表单控件进行规则验证，验证设置了rules属性的控件（Form.Item）\r\n        await this.loginFormRef.current.validateFields()\r\n            .then(value => { // 验证成功，value是验证成功的控件的值\r\n                this.setState({ // 设置当前状态为最新输入的值\r\n                    username: value.username,\r\n                    password: value.password\r\n                })\r\n                axios.post(`${HOST}:${PORT}/admins/login`, {user: value})\r\n                    .then(result => {\r\n                        if (result.data.status === 200) { // 登录成功\r\n                            if (result.data.role === 2) {\r\n                                message.error(\"该账户已注销，如需启用请联系管理员\");\r\n                            } else {\r\n                                // 将用户名和真实姓名写入到sessionStorage中\r\n                                sessionStorage.setItem(\"username\", value.username);\r\n                                // 将token写入到sessionStorage中\r\n                                sessionStorage.setItem(\"token\", result.data.token);\r\n                                // 将身份写到页面上\r\n                                sessionStorage.setItem(\"role\", result.data.role);\r\n                                // 进行页面跳转\r\n                                this.props.history.push(\"/home\");\r\n                            }\r\n                        } else {\r\n                            message.error(result.data.msg);\r\n                            return;\r\n                        }\r\n                    }).catch(err => {\r\n                    console.log(err);\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <div className={\"loginPage\"}>\r\n                    <section className=\"login-content\">\r\n                        <div>\r\n                            <img src={logo} style={{width: \"400px\"}} alt=\"logo\"/>\r\n                        </div>\r\n                        <div style={{marginLeft: \"20px\"}}>\r\n                            <h2 className={\"login-title\"}>创客装修后台管理系统</h2>\r\n                            <Form ref={this.loginFormRef}>\r\n                                <Row>\r\n                                    <Col span={24}>\r\n                                        <Form.Item\r\n                                            name={\"username\"}\r\n                                            rules={[  // 规则\r\n                                                {\r\n                                                    required: true,\r\n                                                    message: '用户名不能为空'\r\n                                                }\r\n                                            ]}\r\n                                        >\r\n                                            <Input\r\n                                                style={{borderRadius: \"24px\"}}\r\n                                                prefix={<UserOutlined style={{color: 'rgba(0,0,0,0.25)'}}/>}\r\n                                                placeholder={\"请输入用户名\"}\r\n                                                size={\"large\"}/>\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col span={24}>\r\n                                        <Form.Item name=\"password\"\r\n                                                   rules={[\r\n                                                       {\r\n                                                           required: true,\r\n                                                           message: '密码不能为空'\r\n                                                       }\r\n                                                   ]}>\r\n                                            <Input.Password\r\n                                                style={{borderRadius: \"24px\"}}\r\n                                                prefix={<LockOutlined style={{color: \"rgba(0,0,0,0.25)\"}}/>}\r\n                                                placeholder={\"请输入密码\"}\r\n                                                size={\"large\"}/>\r\n                                        </Form.Item>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col span={24}>\r\n                                        <Button type={\"primary\"} style={{width: \"100%\", borderRadius: \"24px\"}}\r\n                                                size={\"large\"} onClick={this.login}>登录</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Form>\r\n                            <div style={{float: \"right\", marginTop: \"5px\"}}>\r\n                                <Button type={\"link\"} onClick={() => this.props.history.push(\"/findPwd\")}>忘记密码？</Button>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","E:\\装修小程序\\decorate\\src\\config\\apiconfig.js",[],[],"E:\\装修小程序\\decorate\\src\\components\\OrderTable.js",["92"],[],"import React from \"react\";\r\nimport {Button, Table} from \"antd\";\r\nimport { Input } from 'antd';\r\nimport { Pagination } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nimport axios from \"axios\";\r\n\r\nconst { Column } = Table;\r\n\r\nclass OrderTable extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // axios.get('http://localhost:8089/orders/all')\r\n        //     .then(res=>{\r\n        //         this.setState({\r\n        //             data: res.data\r\n        //         })\r\n        //     })\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div style={{width: \"300px\", float: \"left\"}}>\r\n                    <Input placeholder=\"搜索预约姓名\" width={'40%'} prefix={<UserOutlined />} />\r\n                </div>\r\n                <div style={{width: \"100px\", float: \"left\"}}>\r\n                    <Button type=\"primary\" >搜索</Button>\r\n                </div>\r\n                <br/>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;\r\n                <br/>\r\n                <Table dataSource={this.state.data} bordered>\r\n                    <Column title={\"预约id\"} dataIndex={\"id\"} key={\"id\"} align={\"center\"}/>\r\n                    <Column title={\"预约姓名\"} dataIndex={\"name\"} key={\"name\"} align={\"center\"}/>\r\n                    <Column title={\"电话\"} dataIndex={\"phone\"} key={\"phone\"} align={\"center\"}/>\r\n                    <Column title={\"装修类型\"} dataIndex={\"type\"} key={\"type\"} align={\"center\"}/>\r\n                    <Column title={\"预约日期\"} dataIndex={\"order_date\"} key={\"order_date\"} align={\"center\"}/>\r\n                    <Column title={\"留言\"} dataIndex={\"message\"} key={\"message\"} align={\"center\"}/>\r\n                    <Column title={\"状态\"} dataIndex={\"status\"} key={\"status\"} align={\"center\"}/>\r\n                    <Column title={\"预约时间\"} dataIndex={\"created_at\"} key={\"created_at\"} align={\"center\"}/>\r\n                    <Column title={\"操作\"} dataIndex={\"updated_at\"} key={\"updated_at\"} align={\"center\"}/>\r\n                </Table>\r\n\r\n                <Pagination defaultCurrent={1} total={50} style={{float:\"right\"}}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default OrderTable;","E:\\装修小程序\\decorate\\src\\routes\\privateRoute.js",["93"],[],"import {Route, Redirect} from \"react-router-dom\";\r\nimport {Component} from \"react\";\r\n\r\n// 定义鉴权函数\r\nlet authenticate = () => {\r\n    // 获取页面中存储的token\r\n    let token = sessionStorage.getItem(\"token\");\r\n    // 根据是否存在token，返回不同的值\r\n    return token ? true : false;\r\n}\r\n\r\n// 定义路由组件\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => authenticate() ? <Component {...props}/> :\r\n                <Redirect to={{\r\n                    pathname: \"/\", // 指定重定向的路径\r\n                    state: {from: props.location}\r\n                }}/>\r\n            }\r\n        ></Route>\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;","E:\\装修小程序\\decorate\\src\\components\\findpwd.js",["94","95","96","97","98"],[],"import React, {useState} from \"react\";\r\nimport \"../css/login.css\";\r\nimport {Button, Col, Form, Input, message, Modal, Row, Steps} from \"antd\";\r\nimport {LeftOutlined, LockOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {NavLink, Route} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {HOST, PORT} from \"../config/apiconfig\";\r\nimport {BrowserRouter, Switch} from \"react-router-dom\";\r\nimport Login from \"./login\";\r\n\r\nconst {Step} = Steps;\r\n\r\nexport const Findpwd = function (props) {\r\n    const form1Ref = React.createRef();\r\n    const form2Ref = React.createRef();\r\n\r\n    const [current, setCurrent] = useState(0); // 记录当前的步骤\r\n    const [user, setUser] = useState({}); // 记录用户名\r\n\r\n    const next = async () => { // 验证身份\r\n        await form1Ref.current.validateFields()\r\n            .then(value => { // value是验证成功控件的值：{username:\"张三\",name:\"郑十\"}\r\n                axios.post(`${HOST}:${PORT}/admins/test`, {user: value})\r\n                    .then(result => {\r\n                        if (result.data.status === 200) {\r\n                            setUser({username: value.username, name: value.name}); // 记录当前的用户名，用来改密码\r\n                            message.success(result.data.msg); // 输出后端传来的信息\r\n                            setCurrent(current + 1);\r\n                        } else {\r\n                            message.error(result.data.msg);\r\n                        }\r\n                    }).catch(err => {\r\n                    console.log(err);\r\n                })\r\n\r\n            })\r\n    }\r\n\r\n    const modify = async () => { // 修改密码\r\n        await form2Ref.current.validateFields()\r\n            .then(value => { // value表示获取到的两个密码\r\n                axios.post(`${HOST}:${PORT}/admins/updatePwd`, {\r\n                    user: user,\r\n                    password: value.password\r\n                })\r\n                    .then(result => {\r\n                        if (result.data.status === 201) {\r\n                            message.success(result.data.msg);\r\n                            sessionStorage.setItem(\"username\", user.username);\r\n                            setTimeout(() => {\r\n                                props.history.push(\"/\"); // 路由跳转\r\n                            }, 1000);\r\n                        } else {\r\n                            message.error(result.data.msg);\r\n                        }\r\n                    }).catch(err => {\r\n                    console.log(err);\r\n                })\r\n            })\r\n    }\r\n\r\n    const steps = [ // 账号验证的步骤\r\n        {\r\n            title: \"账号核实\",\r\n            content: function () { // 输入用户名和真实姓名\r\n                return (\r\n                    <Form ref={form1Ref}>\r\n                        <Row>\r\n                            <Col span={24}>\r\n                                <Form.Item name={\"username\"}\r\n                                           rules={[\r\n                                               {\r\n                                                   required: true,\r\n                                                   message: \"用户名不能为空\"\r\n                                               }\r\n                                           ]}>\r\n                                    <Input placeholder={\"请输入用户名\"}\r\n                                           style={{borderRadius: \"24px\", width: \"300px\"}}\r\n                                           prefix={<UserOutlined style={{color: 'rgba(0,0,0,0.25)'}}/>}\r\n                                           size={\"large\"}/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col span={24}>\r\n                                <Form.Item name={\"name\"}\r\n                                           rules={[\r\n                                               {\r\n                                                   required: true,\r\n                                                   message: \"真实姓名不能为空\"\r\n                                               }\r\n                                           ]}>\r\n                                    <Input placeholder={\"请输入真实姓名\"}\r\n                                           size={\"large\"}\r\n                                           style={{borderRadius: \"24px\", width: \"300px\"}}\r\n                                           prefix={<UserOutlined style={{color: 'rgba(0,0,0,0.25)'}}/>}/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: \"修改密码\",\r\n            content: function () {\r\n                return (\r\n                    <Form ref={form2Ref}>\r\n                        <Row>\r\n                            <Col span={24}>\r\n                                <Form.Item name=\"password\"\r\n                                           rules={[\r\n                                               {\r\n                                                   required: true,\r\n                                                   message: \"新密码不能为空\"\r\n                                               }\r\n                                           ]}>\r\n                                    <Input.Password\r\n                                        style={{borderRadius: \"24px\", width: \"300px\"}}\r\n                                        prefix={<LockOutlined style={{color: \"rgba(0,0,0,0.25)\"}}/>}\r\n                                        placeholder={\"请输入新密码\"}\r\n                                        size={\"large\"}/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col span={24}>\r\n                                <Form.Item name=\"confirmPwd\"\r\n                                           rules={[\r\n                                               {\r\n                                                   required: true,\r\n                                                   message: \"请重新输入密码\"\r\n                                               },\r\n                                               {\r\n                                                   validator: ((rule, value) => { // value表示当前控件的值\r\n                                                       let pwd = form2Ref.current.getFieldValue(\"password\"); // 获取输入的密码\r\n                                                       if (pwd && pwd !== value) {\r\n                                                           return Promise.reject(\"两次密码输入不一致\")\r\n                                                       } else {\r\n                                                           return Promise.resolve(); // 表示验证通过\r\n                                                       }\r\n                                                   })\r\n                                               }\r\n                                           ]}>\r\n                                    <Input.Password\r\n                                        style={{borderRadius: \"24px\", width: \"300px\"}}\r\n                                        prefix={<LockOutlined style={{color: \"rgba(0,0,0,0.25)\"}}/>}\r\n                                        placeholder={\"请确认密码\"}\r\n                                        size={\"large\"}/>\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    const back = () => {\r\n        props.history.goBack();\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className={\"loginPage\"}>\r\n                <section className={\"find-content\"}>\r\n                    <div className={\"back\"}>\r\n                        <Button type={\"link\"} style={{color: \"#91A0B5\", fontSize: \"16px\"}}\r\n                                onClick={() => back()}><LeftOutlined/>返回</Button>\r\n                    </div>\r\n                    <h2 style={{padding: \"10px 30px\"}}>忘记密码</h2>\r\n                    <Steps current={current} style={{width: \"300px\", marginBottom: \"30px\"}}>\r\n                        {steps.map(item => (\r\n                            <Step key={item.title} title={item.title}></Step>\r\n                        ))}\r\n                    </Steps>\r\n                    <div className={\"steps-content\"}>{steps[current].content()}</div>\r\n                    <div>\r\n                        {current === 0 && (\r\n                            <Button type={\"primary\"} style={{width: \"300px\", borderRadius: \"24px\"}} size={\"large\"}\r\n                                    onClick={() => next()}>下一步</Button>\r\n                        )}\r\n                        {current === 1 && (\r\n                            <Button type={\"primary\"} style={{width: \"300px\", borderRadius: \"24px\"}}\r\n                                    size={\"large\"} onClick={() => modify()}>修改密码</Button>\r\n                        )}\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}","E:\\装修小程序\\decorate\\src\\components\\home.js",[],[],"E:\\装修小程序\\decorate\\src\\components\\administrator.js",["99","100","101","102","103","104"],[],"import React, {useEffect, useState} from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {BackTop, Button, Form, Input, message, Modal, Pagination, Select, Space, Table, Tag} from \"antd\";\r\nimport axios from \"axios\";\r\nimport {HOST, PORT} from \"../config/apiconfig\";\r\nimport {DeleteOutlined, EditOutlined, ExclamationCircleOutlined, InfoCircleOutlined} from \"@ant-design/icons\";\r\n\r\nexport const Administrator = () => {\r\n    const [admins, setAdmins] = useState([]); // 存放所有的管理员数据，形式数组中存放对象\r\n    const [state, setState] = useState(false); // 记录当前页面是否修改\r\n    const [person, setPerson] = useState({}); // 记录要修改的用户的值\r\n    const [modifyVisiable, setModifyVisiable] = useState(false); // 是否显示修改信息的模态框\r\n    const [addVisiable, setAddVisiable] = useState(false); // 是否显示添加的模态框\r\n    const [selectedValue, setSelectedValue] = useState(\"\"); // 记录Select选择器选择身份搜索还是用户名搜索\r\n    const [selectedRole, setSelectedRole] = useState(0); // 记录使用身份搜索时第二个选择器的值\r\n\r\n    const modifyRef = React.createRef(); // 与修改模态框绑定\r\n    const addRef = React.createRef(); // 与添加模态框绑定\r\n\r\n    const {confirm} = Modal;\r\n\r\n    // 打开模态框\r\n    const showModifyModal = (record) => {\r\n        setPerson(record);\r\n        setModifyVisiable(true);\r\n        // console.log(person);\r\n    }\r\n    const showAddModal = () => {\r\n        setAddVisiable(true);\r\n    }\r\n\r\n    const addButton = [<Button type={\"primary\"} onClick={() => showAddModal()}>添加</Button>] // 控制添加按钮显示\r\n\r\n    // 关闭模态框\r\n    const handleModifyCancel = () => {\r\n        setModifyVisiable(false);\r\n    }\r\n    const handleAddCancel = () => {\r\n        setAddVisiable(false);\r\n    }\r\n\r\n    // 定义管理员身份标签\r\n    const tagArr = [\r\n        <Tag color={\"red\"}>超级管理员</Tag>,\r\n        <Tag color={\"green\"}>普通管理员</Tag>,\r\n        <Tag color={\"default\"}>账号已停用</Tag>\r\n    ]\r\n\r\n    const columns = [ // 定义表格的列\r\n        {\r\n            title: \"编号\",\r\n            dataIndex: \"id\",\r\n            key: \"id\",\r\n            sorter: (a, b) => a.id - b.id,\r\n        },\r\n        {\r\n            title: \"用户名\",\r\n            dataIndex: \"username\",\r\n            key: \"username\",\r\n            editable: true\r\n        },\r\n        {\r\n            title: \"姓名\",\r\n            dataIndex: \"name\",\r\n            key: \"name\",\r\n            editable: true\r\n        },\r\n        {\r\n            title: \"身份\",\r\n            dataIndex: \"role\",\r\n            key: \"role\",\r\n            render: role => (\r\n                <div key={\"role\"}>\r\n                    {tagArr[role]}\r\n                </div>\r\n            ),\r\n            editable: true\r\n        },\r\n        {\r\n            title: \"上次登录\",\r\n            dataIndex: \"last_login_at\",\r\n            key: \"last_login_at\"\r\n        },\r\n        {\r\n            title: \"创建时间\",\r\n            dataIndex: \"created_at\",\r\n            key: \"created_at\"\r\n        },\r\n        {\r\n            title: \"更新时间\",\r\n            dataIndex: \"updated_at\",\r\n            key: \"updated_at\"\r\n        },\r\n        sessionStorage.getItem(\"role\") == 0 ?\r\n            {\r\n                title: \"操作\",\r\n                key: \"action\",\r\n                render: (text, record, index) => {// text：当前行的值，record：当前行的数据，index：当前行索引\r\n                    // text和record是一样的结果，显示表格的具体信息,index是所有的索引，该索引是表格的索引0,1,2\r\n                    return (\r\n                        <Space size={\"middle\"}>\r\n                            <Button type={\"link\"} icon={<EditOutlined/>}\r\n                                    onClick={() => showModifyModal(record)}>编辑</Button>\r\n                            <Button type={\"link\"} icon={<DeleteOutlined/>} danger\r\n                                    onClick={() => showDeletConfirm(record.id)}>删除</Button>\r\n                        </Space>\r\n                    )\r\n                }\r\n            } : {},\r\n    ];\r\n\r\n    // 查询所有的管理员\r\n    const allAdministrator = () => {\r\n        axios.get(`${HOST}:${PORT}/admins/all`)\r\n            .then(result => {\r\n                if (result.data.status === 200) {\r\n                    setAdmins(result.data.data);\r\n                }\r\n                if (result.data.status === 400) {\r\n                    message.error(result.data.msg);\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    // 添加管理员\r\n    const addAdministrator = async () => {\r\n        await addRef.current.validateFields()\r\n            .then(value => {\r\n                axios.post(`${HOST}:${PORT}/admins/register`, {user: value})\r\n                    .then(result => {\r\n                        if (result.data.status === 201) {\r\n                            message.success(result.data.msg);\r\n                            setAddVisiable(false);\r\n                            setState(!state);\r\n                        } else {\r\n                            message.success(\"注册失败\");\r\n                        }\r\n                    }).catch(err => {\r\n                    console.log(err);\r\n                })\r\n            })\r\n    }\r\n\r\n    const modify = async () => { // 修改管理员信息\r\n        await modifyRef.current.validateFields()\r\n            .then(value => { // 修改后的数据\r\n                axios.post(`${HOST}:${PORT}/admins/modifyInfo`, {user: value, id: person.id})\r\n                    .then(result => {\r\n                        if (result.data.status === 201) {\r\n                            message.success(result.data.msg);\r\n                            setModifyVisiable(false);\r\n                            setState(!state);\r\n                        }\r\n                    }).catch(err => {\r\n                    console.log(err);\r\n                })\r\n            })\r\n    }\r\n\r\n    const deletePerson = (id) => { // 删除某个人\r\n        // console.log(typeof id) // id是获取到的索引number类型\r\n        axios.delete(`${HOST}:${PORT}/admins/delete`, {data: {id: id}})\r\n            .then(result => {\r\n                // console.log(result);\r\n                if (result.data.status === 204) {\r\n                    setState(!state); // 刷新\r\n                    message.success(result.data.msg);\r\n                } else {\r\n                    message.error(\"删除失败\");\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const showModifyConfirm = () => { // 修改时弹出的确定框\r\n        confirm({\r\n            title: \"确定修改\",\r\n            icon: <ExclamationCircleOutlined/>,\r\n            onOk() {\r\n                modify();\r\n            },\r\n            okText: \"确定\",\r\n            cancelText: \"取消\",\r\n            centered: true\r\n        })\r\n    }\r\n\r\n    const showDeletConfirm = (id) => { // 删除时弹出的提示框\r\n        confirm({\r\n            title: \"确定删除\",\r\n            icon: <ExclamationCircleOutlined/>,\r\n            onOk() {\r\n                deletePerson(id);\r\n            },\r\n            okText: \"删除\",\r\n            cancelText: \"取消\",\r\n            centered: true,\r\n            okType: \"danger\"\r\n        })\r\n    }\r\n\r\n    const showAddConfirm = async () => { // 添加用户信息询问框\r\n        confirm({\r\n            title: \"添加用户\",\r\n            icon: <InfoCircleOutlined/>,\r\n            onOk() {\r\n                addAdministrator();\r\n            },\r\n            okText: \"添加\",\r\n            cancelText: \"取消\",\r\n            centered: true\r\n        })\r\n    }\r\n\r\n    const searchInformation = () => { // 搜索用户信息\r\n        if (selectedValue == \"role\") { // 使用身份搜索\r\n            // console.log(selectedRole);\r\n            axios.post(`${HOST}:${PORT}/admins/role`, {role: selectedRole})\r\n                .then(result => {\r\n                    if (result.data.status === 200) {\r\n                        setAdmins(result.data.data);\r\n                    }\r\n                }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        } else { // 使用用户名搜索\r\n            let value = document.getElementById(\"input\").value; // 获取输入框的值\r\n            if (value == \"\") {\r\n                setState(!state);\r\n                return;\r\n            }\r\n            axios.post(`${HOST}:${PORT}/admins/some`, {username: value})\r\n                .then(result => {\r\n                    if (result.data.status === 200) {\r\n                        setAdmins(result.data.data);\r\n                    }\r\n                }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(() => allAdministrator(), [state]); // 设置刷新当前页面的条件\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div style={{padding: \"30px 20px\"}}>\r\n                <div style={{width: \"40%\"}}>\r\n                    <Input.Group compact style={{display: \"flex\"}} className={\"select\"}>\r\n                        <Select defaultValue={\"username\"} onChange={value => { // 当变化时调用\r\n                            setSelectedValue(value); // 传递的是username和role\r\n                            setState(!state); // 切换搜索途径时刷新一下\r\n                        }}>\r\n                            <Select.Option value={\"username\"}>用户名</Select.Option>\r\n                            <Select.Option value={\"role\"}>身&nbsp;&nbsp;&nbsp;份</Select.Option>\r\n                        </Select>\r\n                        {selectedValue == \"role\" ? (\r\n                            <Select style={{width: \"200px\"}} defaultValue={0} onChange={value => { // value是0，1，2\r\n                                console.log(value, selectedRole);\r\n                                setSelectedRole(value);\r\n                                console.log(selectedRole);\r\n                            }}>\r\n                                <Select.Option value={0}>超级管理员</Select.Option>\r\n                                <Select.Option value={1}>普通管理员</Select.Option>\r\n                                <Select.Option value={2}>账户已停用</Select.Option>\r\n                            </Select>\r\n                        ) : (<Input style={{width: \"200px\"}} id={\"input\"}/>)}&nbsp;&nbsp;&nbsp;\r\n                        <Button type={\"primary\"} onClick={() => searchInformation()}>搜索</Button>&nbsp;&nbsp;&nbsp;\r\n                        {addButton[sessionStorage.getItem(\"role\")]}\r\n                    </Input.Group>\r\n                </div>\r\n                <Table rowKey={record => record.id} columns={columns} dataSource={admins}\r\n                       style={{marginTop: \"20px\"}} pagination={{\r\n                    pageSize: 5, // 每页显示条数\r\n                    hideOnSinglePage: true, // 一页时隐藏分页器，\r\n                    showQuickJumper: true,\r\n                }}></Table>\r\n                <Modal title={\"修改管理员信息\"} visible={modifyVisiable} okText={\"修改\"} cancelText={\"取消\"}\r\n                       onCancel={handleModifyCancel}\r\n                       destroyOnClose onOk={() => showModifyConfirm()} centered={true}>\r\n                    <Form ref={modifyRef}>\r\n                        <Form.Item label=\"用&nbsp;&nbsp;户&nbsp;&nbsp;名\" name={\"username\"} initialValue={person.username}\r\n                                   rules={[\r\n                                       {\r\n                                           required: true,\r\n                                           message: \"用户名不能为空\"\r\n                                       }\r\n                                   ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item label={\"真实姓名\"} name={\"name\"} initialValue={person.name} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: \"真实姓名不能为空\"\r\n                            }\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"身&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;份\" name={\"role\"} rules={[\r\n                            {\r\n                                required: true\r\n                            }\r\n                        ]} initialValue={person.role}>\r\n                            <Select>\r\n                                <Select.Option value={0}>超级管理员</Select.Option>\r\n                                <Select.Option value={1}>普通管理员</Select.Option>\r\n                                <Select.Option value={2}>账户已停用</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal title={\"添加管理人员\"} visible={addVisiable} okText={\"添加\"} cancelText={\"取消\"} onCancel={handleAddCancel}\r\n                       destroyOnClose centered={true} onOk={() => showAddConfirm()}>\r\n                    <Form ref={addRef}>\r\n                        <Form.Item label=\"用&nbsp;&nbsp;户&nbsp;&nbsp;名\" name={\"username\"}\r\n                                   rules={[{required: true, message: \"请输入用户名\"}]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item label={\"真实姓名\"} name={\"name\"}\r\n                                   rules={[{required: true, message: \"请输入真实姓名\"}]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item label={\"初始密码\"} name={\"password\"} rules={[{required: true, message: \"请输入初始密码\"}]}>\r\n                            <Input.Password/>\r\n                        </Form.Item>\r\n                        <Form.Item label={\"确认密码\"} name={\"confirmPwd\"} rules={[{\r\n                            required: true,\r\n                            message: \"请确认初始密码\"\r\n                        }, {\r\n                            validator: ((rule, value) => { // value表示当前控件的值\r\n                                let pwd = addRef.current.getFieldValue(\"password\"); // 获取输入的密码\r\n                                if (pwd && pwd !== value) {\r\n                                    return Promise.reject(\"两次密码输入不一致\")\r\n                                } else {\r\n                                    return Promise.resolve(); // 表示验证通过\r\n                                }\r\n                            })\r\n                        }]}>\r\n                            <Input.Password/>\r\n                        </Form.Item>\r\n                        <Form.Item label=\"身&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;份\" name={\"role\"}\r\n                                   rules={[{required: true}]} initialValue={0}>\r\n                            <Select>\r\n                                <Select.Option value={0}>超级管理员</Select.Option>\r\n                                <Select.Option value={1}>普通管理员</Select.Option>\r\n                                <Select.Option value={2}>账户已停用</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}","E:\\装修小程序\\decorate\\src\\components\\case.js",["105","106","107","108","109"],[],"import React, {useEffect, useState} from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Button, Input, Card, PageHeader, Modal, Form, Upload, Row, Col, message, Image, Descriptions} from \"antd\";\r\nimport BraftEditor from \"braft-editor\"; // 引入富文本编辑器\r\nimport \"braft-editor/dist/index.css\"; // 引入css样式\r\nimport {ExclamationCircleOutlined, PlusOutlined} from \"@ant-design/icons\";\r\nimport {HOST, PORT} from \"../config/apiconfig\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport axios from \"axios\";\r\nimport Title from \"antd/es/typography/Title\";\r\n\r\nconst Case = function (props) {\r\n    // 下面是添加案例部分的\r\n    const [fileList, setFileList] = useState([]); // 图片文件列表\r\n    const [previewVisiable, setPreviewVisiable] = useState(false); // 记录预览图片的模态框是否打开\r\n    const [previewTitle, setPreviewTitle] = useState(\"\"); // 模态框上显示的图片的标题\r\n    const [previewImage, setPreviewImage] = useState(\"\"); // 预览的图片文件\r\n    const [publishVisiable, setPublishVisiable] = useState(false); // 提交模态框是否显示\r\n    // 下面是表示是否打开添加页面、案例页面、单个案例页面\r\n    const [isAdd, setIsAdd] = useState(false); // 记录是否是添加页面\r\n    const [isLook, setIsLook] = useState(false); // 记录是否打开查看某个案例\r\n    const [isCase, setIsCase] = useState(true); // 记录当前是否是案例主页面\r\n    const [isEdit, setIsEdit] = useState(false); // 记录是否编辑案例\r\n    // 刷新页面，存放案例数据\r\n    const [state, setState] = useState(false); // 记录当前页面数据是否修改\r\n    const [allCase, setAllCase] = useState([]); // 用来存放所有的案例\r\n    const [oneCase, setOneCase] = useState([]); // 记录要查看的单个案例\r\n    // const [editorState, setEditorState] = useState(BraftEditor.createEditorState(null)); // 创建空的editorState作为初始值\r\n\r\n    const addCaseRef = React.createRef(); // 与添加案例表单绑定\r\n    const editCaseRef = React.createRef(); // 与编辑案例表单绑定\r\n\r\n    const handleImgChange = ({fileList: newFileList}) => { // 点击上传图片之后，将上传的图片存放在数组\r\n        setFileList(newFileList);\r\n    }\r\n\r\n    const back = () => { // 退出添加页面的模态框\r\n        Modal.confirm({\r\n            title: \"确认退出\",\r\n            icon: <ExclamationCircleOutlined/>,\r\n            content: \"您的文章将不会被保存\",\r\n            okText: \"确认\",\r\n            cancelText: \"取消\",\r\n            onOk: () => {\r\n                setIsAdd(false); // 关闭添加页面\r\n                setFileList([]); // 将照片列表设空\r\n                setIsCase(true); // 打开案例页面\r\n                setIsEdit(false); // 关闭编辑页面\r\n            },\r\n        })\r\n    }\r\n\r\n    const getBase64 = (file) => { // 读取图片文件\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader(); // 创建读取文件的对象\r\n            reader.readAsDataURL(file); // 读取文件的url\r\n            reader.onload = () => resolve(reader.result); // 返回文件内容\r\n            reader.onerror = (err) => reject(err);\r\n        })\r\n    }\r\n\r\n    const uploadButton = ( // 未上传图片时显示的按钮\r\n        <div>\r\n            <PlusOutlined/>\r\n            <div style={{marginTop: \"8px\"}}>上传封面</div>\r\n        </div>\r\n    )\r\n\r\n    const handlePreview = async (file) => { // 图片预览功能，在模态框中预览\r\n        if (!file.url && !file.preview) { // 如果文件没有打开且没有预览，则打开并且预览\r\n            file.preview = await getBase64(file.originFileObj);\r\n        }\r\n        setPreviewVisiable(true); // 显示模态框\r\n        setPreviewImage(file.url || file.preview); // 预览图片文件\r\n        setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1)); // 上传图片的标题\r\n    }\r\n\r\n    const beforeUpload = (file) => { // 上传前的格式检查\r\n        const isCorrect = (file.type === \"image/jpeg\" || file.type === \"image/png\");\r\n        if (!isCorrect) {\r\n            message.error(\"请上传JPG或PNG格式的图片\");\r\n            return Upload.LIST_IGNORE;\r\n        }\r\n        return isCorrect;\r\n    }\r\n\r\n    const publish = async () => { // 点击发布之后弹出模态框\r\n        await addCaseRef.current.validateFields()\r\n            .then(value => {\r\n                if (value.braft == undefined || fileList.length == 0 || value.img == undefined || fileList[0].response == undefined) {\r\n                    message.info(\"请上传封面\");\r\n                    return;\r\n                }\r\n                Modal.confirm({\r\n                    title: \"你确定发布文章吗\",\r\n                    visible: publishVisiable,\r\n                    onCancel: setPublishVisiable(false),\r\n                    centered: true,\r\n                    okText: \"确定\",\r\n                    cancelText: \"取消\",\r\n                    onOk: () => submit()\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    const submit = async () => { // 发布文章\r\n        await addCaseRef.current.validateFields()\r\n            .then(value => {\r\n                const event = {\r\n                    name: value.name,\r\n                    img: fileList[0].response.imgPath,\r\n                    desc: value.desc,\r\n                    content: value.braft.toHTML(),\r\n                }\r\n                axios.post(`${HOST}:${PORT}/case/add`, {event: event})\r\n                    .then(result => {\r\n                        if (result.data.status === 201) {\r\n                            message.success(result.data.msg); // 提示信息\r\n                            setFileList([]); // 设置图片列表为空\r\n                            setTimeout(() => {\r\n                                setIsAdd(false); // 关闭添加页面\r\n                            }, 1000);\r\n                            setIsCase(true); // 显示案例页面\r\n                            setState(!state); // 刷新案例页面\r\n                        }\r\n                        if (result.data.status === 422) {\r\n                            message.info(\"请上传封面\");\r\n                        }\r\n                    }).catch(err => {\r\n                    console.log(err);\r\n                })\r\n            })\r\n    }\r\n\r\n    const addPage = () => { // 添加案例\r\n        return (\r\n            <div>\r\n                <PageHeader className={\"site-page-header\"} onBack={() => back()} title={\"编辑案例\"} extra={[\r\n                    <Button key={1} type={\"primary\"} onClick={() => back()}>取消编辑</Button>,\r\n                    <Button key={2} type={\"primary\"} onClick={() => publish()}>发布文章</Button>\r\n                ]}>\r\n                </PageHeader>\r\n                <Form ref={addCaseRef}>\r\n                    <Row align={\"center\"}>\r\n                        <Col span={23}>\r\n                            <Form.Item name={\"name\"} defaultValue={\"【无标题】\"}\r\n                                       rules={[{required: true, message: \"请输入文章标题\"}]}>\r\n                                <Input placeholder={\"请输入文章标题\"}\r\n                                       style={{borderRadius: \"24px\", height: \"40px\", padding: \"8px\"}}/>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row align={\"center\"}>\r\n                        <Col span={23}>\r\n                            <Form.Item name={\"braft\"} rules={[{required: true, message: \"请输入正文\"}]}>\r\n                                <BraftEditor placeholder={\"在这里输入正文\"} style={{border: \"1px solid #d9d9d9\"}}/>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row align={\"center\"}>\r\n                        <Col span={3}>\r\n                            <Form.Item name={\"img\"}>\r\n                                <Upload action={`${HOST}:${PORT}/case/upload`} // 上传\r\n                                        name={\"img\"} // 发到后台的文件参数名\r\n                                        listType={\"picture-card\"}\r\n                                        fileList={fileList} onChange={handleImgChange}\r\n                                        data={file => ({photoContent: file})} // 用户选择的文件\r\n                                        onPreview={handlePreview} beforeUpload={beforeUpload}>\r\n                                    {fileList.length >= 1 ? null : uploadButton}\r\n                                </Upload>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={13}>\r\n                            <Form.Item name={\"desc\"} rules={[{required: true, message: \"请输入文章摘要\"}]}>\r\n                                <TextArea placeholder={\"请输入文章摘要\"} autoSize={{minRows: 4, maxRows: 4}}\r\n                                          style={{width: \"700px\"}} showCount maxLength={255}></TextArea>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n                <Modal visible={previewVisiable} title={previewTitle}\r\n                       onCancel={() => setPreviewVisiable(false)} footer={null}>\r\n                    <img alt={\"example\"} style={{width: \"100%\"}} src={previewImage}/>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const getAllCase = () => { // 查询所有的案例\r\n        axios.get(`${HOST}:${PORT}/case/all`)\r\n            .then(result => {\r\n                if (result.data.status === 200) {\r\n                    setAllCase(result.data.data);\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    useEffect(() => getAllCase(), [state]); // 记录什么时候刷新数据\r\n\r\n    const select = () => { // 搜索某个案例\r\n        let name = document.getElementById(\"searchCase\").value; // 获取输入框中值\r\n        if (name == \"\") { // 输入框中的值为空\r\n            setState(!state); // 刷新当前页面\r\n        } else {\r\n            axios.post(`${HOST}:${PORT}/case/some`, {name: name})\r\n                .then(result => {\r\n                    if (result.data.status === 200) {\r\n                        setAllCase(result.data.data);\r\n                    }\r\n                    if (result.data.status === 404) {\r\n                        message.info(result.data.msg);\r\n                    }\r\n                }).catch(err => {\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectOneCase = async (id) => { // 搜索当前被点击的案例的具体信息\r\n        axios.post(`${HOST}:${PORT}/case/one`, {id: id})\r\n            .then(result => {\r\n                if (result.data.status === 200) {\r\n                    setOneCase(result.data.data); // 将查询到的案例信息存储起来\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const casePage = () => { // 显示所有的案例\r\n        return (\r\n            <div>\r\n                <Input.Group compact>\r\n                    <Input id={\"searchCase\"} style={{width: \"200px\"}} placeholder={\"请输入案例名称\"}/>&nbsp;&nbsp;&nbsp;\r\n                    <Button type={\"primary\"} onClick={() => select()}>搜索</Button>&nbsp;&nbsp;&nbsp;\r\n                    <Button type={\"primary\"} onClick={() => {\r\n                        setIsCase(false); // 关闭案例页面\r\n                        setIsAdd(true); // 打开添加页面\r\n                        setIsEdit(false); // 不打开编辑页面\r\n                    }}>添加</Button>\r\n                </Input.Group>\r\n                <div style={{marginTop: \"20px\"}}>\r\n                    {\r\n                        allCase.map(item => {\r\n                            return (\r\n                                <div key={item.id}>\r\n                                    <Card hoverable style={{padding: 0, margin: 0}}\r\n                                          onClick={async () => {\r\n                                              setIsCase(false); // 关闭案例页面\r\n                                              setIsLook(true); // 打开查看页面\r\n                                              setIsEdit(false); // 不打开编辑页面\r\n                                              await selectOneCase(item.id);\r\n                                          }}>\r\n                                        <div style={{\r\n                                            display: \"flex\",\r\n                                            height: \"150px\",\r\n                                            padding: 0,\r\n                                            margin: 0,\r\n                                        }}>\r\n                                            <div style={{\r\n                                                width: \"260px\"\r\n                                            }}>\r\n                                                <Image src={item.img} width={260} preview={false} height={147}\r\n                                                       placeholder={true}/>\r\n                                            </div>\r\n                                            <div style={{\r\n                                                marginLeft: \"20px\",\r\n                                                width: \"100%\", height: \"147px\"\r\n                                            }}>\r\n                                                <div\r\n                                                    style={{\r\n                                                        flexDirection: \"row\",\r\n                                                        padding: 0,\r\n                                                        margin: 0,\r\n                                                        height: \"39px\"\r\n                                                    }}>\r\n                                                    <div style={{fontSize: \"25px\"}}>{item.name}</div>\r\n                                                </div>\r\n                                                <div style={{\r\n                                                    marginTop: \"15px\",\r\n                                                    height: \"70px\",\r\n                                                    padding: 0, margin: 0,\r\n                                                    color: \"#555666\"\r\n                                                }}>{item.desc}</div>\r\n                                                <div style={{\r\n                                                    alignSelf: \"flex-end\",\r\n                                                    height: \"28px\",\r\n                                                    lineHeight: \"27px\"\r\n                                                }}>发布时间：{item.created_at}&nbsp;&nbsp;&nbsp;更新时间：{item.updated_at}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const confirmDelete = () => { // 询问是否确定删除\r\n        Modal.confirm({\r\n            title: \"你确定删除该文章吗\",\r\n            icon: <ExclamationCircleOutlined/>,\r\n            okText: \"确定\",\r\n            cancelText: \"取消\",\r\n            centered: true,\r\n            onOk: () => deleteCase()\r\n        })\r\n    }\r\n\r\n    const deleteCase = async () => { // 删除案例\r\n        axios.delete(`${HOST}:${PORT}/case/delete`, {data: {id: oneCase[0].id}})\r\n            .then(result => {\r\n                if (result.data.status === 204) {\r\n                    message.success(result.data.msg);\r\n                    setIsLook(false);\r\n                    setIsCase(true);\r\n                    setState(!state);\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const editPage = () => { // 编辑案例\r\n        let content = oneCase[0].content;\r\n        let editorState = BraftEditor.createEditorState(content);\r\n        console.log(editorState);\r\n        return (\r\n            <div>\r\n                <PageHeader className={\"site-page-header\"} onBack={() => back()} title={\"编辑案例\"} extra={[\r\n                    <Button key={1} type={\"primary\"} onClick={() => back()}>取消编辑</Button>,\r\n                    <Button key={2} type={\"primary\"}>发布文章</Button>\r\n                ]}>\r\n                </PageHeader>\r\n                <Form ref={editCaseRef}>\r\n                    <Row align={\"center\"}>\r\n                        <Col span={23}>\r\n                            <Form.Item name={\"name\"} initialValue={oneCase[0].name}\r\n                                       rules={[{required: true, message: \"请输入文章标题\"}]}>\r\n                                <Input placeholder={\"请输入文章标题\"}\r\n                                       style={{borderRadius: \"24px\", height: \"40px\", padding: \"8px\"}}/>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row align={\"center\"}>\r\n                        <Col span={23}>\r\n                            <Form.Item name={\"braft\"} rules={[{required: true, message: \"请输入正文\"}]}>\r\n                                <BraftEditor placeholder={\"在这里输入正文\"} style={{border: \"1px solid #d9d9d9\"}}\r\n                                             initialContent={editorState}/>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row align={\"center\"}>\r\n                        <Col span={3}>\r\n                            <Form.Item name={\"img\"}>\r\n                                <Upload action={`${HOST}:${PORT}/case/upload`} // 上传\r\n                                        name={\"img\"} // 发到后台的文件参数名\r\n                                        listType={\"picture-card\"}\r\n                                        fileList={fileList} onChange={handleImgChange}\r\n                                        data={file => ({photoContent: file})} // 用户选择的文件\r\n                                        onPreview={handlePreview} beforeUpload={beforeUpload}>\r\n                                    {fileList.length >= 1 ? null : uploadButton}\r\n                                </Upload>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col span={13}>\r\n                            <Form.Item name={\"desc\"} rules={[{required: true, message: \"请输入文章摘要\"}]}\r\n                                       initialValue={oneCase[0].desc}>\r\n                                <TextArea placeholder={\"请输入文章摘要\"} autoSize={{minRows: 4, maxRows: 4}}\r\n                                          style={{width: \"700px\"}} showCount maxLength={255}></TextArea>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n                <Modal visible={previewVisiable} title={previewTitle}\r\n                       onCancel={() => setPreviewVisiable(false)} footer={null}>\r\n                    <img alt={\"example\"} style={{width: \"100%\"}} src={previewImage}/>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const look = () => { // 当点击某篇案例时打开该案例\r\n        return (\r\n            <div style={{width: \"100%\"}}>\r\n                <PageHeader onBack={() => {\r\n                    setIsLook(false);\r\n                    setIsCase(true);\r\n                }} title={\"返回\"} extra={[<Button key={1} type={\"link\"} onClick={() => {\r\n                    setIsEdit(true); // 打开编辑页面\r\n                    setIsLook(false); // 关闭查看页面\r\n                }}>编辑</Button>,\r\n                    <Button key={2} type={\"link\"} onClick={confirmDelete}>删除</Button>]}>\r\n                    <Descriptions>\r\n                        <Descriptions.Item\r\n                            label={\"发布时间\"}>{oneCase[0] ? oneCase[0].created_at : null}</Descriptions.Item>\r\n                        <Descriptions.Item\r\n                            label={\"更新时间\"}>{oneCase[0] ? oneCase[0].updated_at : null}</Descriptions.Item>\r\n                    </Descriptions>\r\n                    <Title level={2} style={{textAlign: \"center\"}}>{oneCase[0] ? oneCase[0].name : null}</Title>\r\n                    <div>{oneCase[0] ? (\r\n                        <div dangerouslySetInnerHTML={{__html: oneCase[0].content}}></div>\r\n                    ) : null}</div>\r\n                </PageHeader>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div style={{padding: \"30px 20px\"}}>\r\n                {isCase ? casePage() : null}\r\n                {isAdd ? addPage() : null}\r\n                {isLook ? look() : null}\r\n                {isEdit ? editPage() : null}\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Case;","E:\\装修小程序\\decorate\\src\\components\\cate.js",["110","111","112"],[],"import React from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Button, Form, Image, Input, message, Modal, Table, Upload} from \"antd\";\r\nimport axios from \"axios\";\r\nimport {HOST, PORT} from \"../config/apiconfig\";\r\nimport Draggable from \"react-draggable\";\r\nimport {DeleteOutlined, EditOutlined, PlusOutlined} from \"@ant-design/icons\";\r\n\r\nclass Cate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allcate: [], // 存放所有的类别\r\n            addVisiable: false, // 是否显示添加模态框\r\n            bounds: {left: 0, top: 0, bottom: 0, right: 0}, // 拖拽模态框初始参数\r\n            disabled: true, // 是否可以拖拽\r\n            fileList: [], // 图片文件列表\r\n            previewVisiable: false, // 是否预览图片文件\r\n            previewTitle: \"\", // 预览模态框上标题\r\n            previewImage: \"\", // 预览的图片文件\r\n            editVisiable: false, // 是否显示编辑模态框\r\n            editInfo: \"\", // 记录要编辑的类的信息\r\n            deleteId: \"\", // 记录要删除的Id\r\n        }\r\n    }\r\n\r\n    draggleRef = React.createRef(); // 操作模态框的移动\r\n    addRef = React.createRef(); // 操作添加表单\r\n    editRef = React.createRef(); // 操作编辑表单\r\n\r\n    getAllCate = () => { // 获取所有的案例\r\n        axios.get(`${HOST}:${PORT}/cate/all`)\r\n            .then(result => {\r\n                if (result.data.status === 200) {\r\n                    this.setState({\r\n                        allcate: result.data.data\r\n                    })\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    addCateModal = () => { // 打开添加类别的模态框\r\n        this.setState({\r\n            addVisiable: true\r\n        })\r\n    }\r\n\r\n    handleCancel = () => { // 取消显示模态框\r\n        this.setState({\r\n            addVisiable: false,\r\n            editVisiable: false,\r\n            fileList: [] // 将图片文件删掉\r\n        })\r\n    }\r\n\r\n    onStart = (event, uiData) => { // 拖拽模态框\r\n        const {clientWidth, clientHeight} = window.document.documentElement; // 获取屏幕宽高\r\n        const targetRect = this.draggleRef.current?.getBoundingClientRect();\r\n        if (!targetRect) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            bounds: {\r\n                left: -targetRect.left + uiData.x,\r\n                right: clientWidth - (targetRect.right - uiData.x),\r\n                top: -targetRect.top + uiData.y,\r\n                bottom: clientHeight - (targetRect.bottom - uiData.y),\r\n            }\r\n        })\r\n    }\r\n\r\n    getBase64 = (file) => { // 读取图片文件\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader(); // 创建读取文件的对象\r\n            reader.readAsDataURL(file); // 读取文件的url\r\n            reader.onload = () => resolve(reader.result); // 返回文件内容\r\n            reader.onerror = (err) => reject(err);\r\n        })\r\n    }\r\n\r\n    beforeUpload = (file) => { // 对图片格式进行校验\r\n        const isCorrect = (file.type === \"image/jpeg\" || file.type === \"image/png\"); // 判断图片格式是否正确\r\n        if (!isCorrect) { // 如果不正确\r\n            message.info(\"请上传JPG或PNG格式的图片\");\r\n            return Upload.LIST_IGNORE; // 阻止上传\r\n        }\r\n        return isCorrect;\r\n    }\r\n\r\n    handlePreview = async (file) => { // 图片预览功能\r\n        if (!file.url && !file.preview) { // 如果文件没有打开且没有预览，打开并预览\r\n            file.preview = await this.getBase64(file.originFileObj);\r\n        }\r\n        this.setState({\r\n            previewVisiable: true, // 打开预览模态框\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1), // 设置标题\r\n            previewImage: file.url || file.preview, // 设置预览图片\r\n        })\r\n    }\r\n\r\n    handleImageChange = ({fileList}) => { // 设置上传的图片列表\r\n        this.setState({\r\n            fileList: fileList\r\n        })\r\n    }\r\n\r\n    confirmAdd = () => { // 确定是否添加类别模态框\r\n        Modal.confirm({\r\n            title: \"确定添加类别\",\r\n            okText: \"确定\",\r\n            cancelText: \"取消\",\r\n            centered: true,\r\n            onOk: this.addCate\r\n        })\r\n    }\r\n\r\n    confirmEdit = () => { // 确定编辑模态框\r\n        Modal.confirm({\r\n            title: \"确定修改类别信息\",\r\n            okText: \"确定\",\r\n            cancelText: \"取消\",\r\n            centered: true,\r\n            onOk: this.editCate\r\n        })\r\n    }\r\n\r\n    confirmDelete = () => { // 确定删除模态框\r\n        Modal.confirm({\r\n            title: \"你确定删除该类别吗\",\r\n            okText: \"删除\",\r\n            cancelText: \"取消\",\r\n            centered: true,\r\n            onOk: this.delCate\r\n        })\r\n    }\r\n\r\n    addCate = async () => { // 添加类别\r\n        try {\r\n            await this.addRef.current.validateFields()\r\n                .then(value => {\r\n                    axios.post(`${HOST}:${PORT}/cate/add`, {\r\n                        event: {\r\n                            name: value.name,\r\n                            img: this.state.fileList[0].response.imgPath\r\n                        }\r\n                    }).then(result => {\r\n                        // console.log(this.state.fileList) {uid: 'rc-upload-1648481789669-2', lastModified: 1648475446000, lastModifiedDate: Mon Mar 28 2022 21:50:46 GMT+0800 (中国标准时间), name: '1.jpeg', size: 6664, …}\r\n                        if (result.data.status === 201) {\r\n                            message.success(result.data.msg);\r\n                            this.setState({\r\n                                addVisiable: false, // 关闭添加模态框\r\n                                fileList: [] // 将图片列表制空\r\n                            })\r\n                            this.getAllCate();\r\n                        }\r\n                    })\r\n                })\r\n        } catch (err) {\r\n            // throw err;\r\n        }\r\n    }\r\n\r\n    editCate = async () => { // 编辑当前案例\r\n        try {\r\n            await this.editRef.current.validateFields()\r\n                .then(value => {\r\n                    const event = {\r\n                        id: this.state.editInfo.id,\r\n                        name: value.name,\r\n                        img: this.state.fileList[0].response.imgPath ? this.state.fileList[0].response.imgPath : this.state.fileList[0].url,\r\n                    }\r\n                    axios.put(`${HOST}:${PORT}/cate/modify`, {event: event})\r\n                        .then(result => {\r\n                            if (result.data.status === 201) {\r\n                                message.success(result.data.msg);\r\n                                this.setState({\r\n                                    editVisiable: false,\r\n                                    fileList: []\r\n                                })\r\n                                this.getAllCate();\r\n                            }\r\n                        })\r\n                })\r\n\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    delCate = () => { // 删除类别\r\n        axios.delete(`${HOST}:${PORT}/cate/delete`, {data: {id: this.state.deleteId}})\r\n            .then(result => {\r\n                if (result.data.status === 204) {\r\n                    message.success(result.data.msg);\r\n                    this.setState({\r\n                        deleteId: \"\"\r\n                    })\r\n                    this.getAllCate(); // 刷新页面\r\n                }\r\n            })\r\n    }\r\n\r\n    selectCate = () => { // 搜索类别\r\n        let value = document.getElementById(\"searchCate\").value;\r\n        if (value == \"\") {\r\n            this.getAllCate();\r\n            return;\r\n        }\r\n        axios.post(`${HOST}:${PORT}/cate/some`, {name: value})\r\n            .then(result => {\r\n                if (result.data.status === 200) {\r\n                    this.setState({\r\n                        allcate: result.data.data\r\n                    })\r\n                }\r\n            }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllCate(); // 页面加载完成后获取全部案例数据\r\n    }\r\n\r\n    render() {\r\n        const uploadButton = ( // 定义未上传时显示的按钮\r\n            <div>\r\n                <PlusOutlined/>\r\n                <div style={{marginTop: \"8px\"}}>上传封面</div>\r\n            </div>);\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <div style={{padding: \"30px 20px\"}}>\r\n                    <Input.Group compact>\r\n                        <Input id={\"searchCate\"} style={{width: \"200px\"}} placeholder={\"请输入类别名称\"}/>&nbsp;&nbsp;&nbsp;\r\n                        <Button type={\"primary\"} onClick={this.selectCate}>搜索</Button>&nbsp;&nbsp;&nbsp;\r\n                        <Button type={\"primary\"} onClick={this.addCateModal}>添加</Button>\r\n                    </Input.Group>\r\n                    <Table style={{marginTop: \"20px\", textAlign: \"center\"}} dataSource={this.state.allcate}\r\n                           rowKey={record => record.id} pagination={{\r\n                        pageSize: 4,\r\n                        pageSizeOptions: [5, 10, 20, 50, 100],\r\n                        showTotal: total => \"共\" + \"\\n\" + total + \"\\n\" + \"条记录\",\r\n                        hideOnSinglePage: true\r\n                    }}>\r\n                        <Table.Column align={\"center\"} title={\"类别编号\"} key={\"id\"} dataIndex={\"id\"}></Table.Column>\r\n                        <Table.Column align={\"center\"} title={\"类别名称\"} key={\"name\"} dataIndex={\"name\"}></Table.Column>\r\n                        <Table.Column align={\"center\"} title={\"类别标识\"} key={\"img\"} dataIndex={\"img\"}\r\n                                      render={(value, record) => {\r\n                                          // value是当前项的数据，record是整行的数据\r\n                                          return (\r\n                                              <div>\r\n                                                  <Image src={value} alt={record.name} height={50}/>\r\n                                              </div>\r\n                                          )\r\n                                      }}></Table.Column>\r\n                        <Table.Column align={\"center\"} title={\"创建时间\"} key={\"created_at\"}\r\n                                      dataIndex={\"created_at\"}></Table.Column>\r\n                        <Table.Column align={\"center\"} title={\"更新时间\"} key={\"updated_at\"}\r\n                                      dataIndex={\"updated_at\"}></Table.Column>\r\n                        <Table.Column align={\"center\"} title={\"操作\"} key={\"actions\"}\r\n                                      dataIndex={\"actions\"} render={(value, record) => {\r\n                            return (\r\n                                <div>\r\n                                    <Button type={\"link\"} icon={<EditOutlined/>}\r\n                                            onClick={async () => {\r\n                                                await this.setState({\r\n                                                    editInfo: record,\r\n                                                    fileList: [{uid: record.id, url: record.img}],\r\n                                                    editVisiable: true // 显示模态框\r\n                                                })\r\n                                            }}>编辑</Button>\r\n                                    <Button type={\"link\"} icon={<DeleteOutlined/>} danger onClick={async () => {\r\n                                        await this.setState({\r\n                                            deleteId: record.id\r\n                                        })\r\n                                        this.confirmDelete();\r\n                                    }}>删除< /Button>\r\n                                </div>\r\n                            )\r\n                        }}></Table.Column>\r\n                    </Table>\r\n                    {/*添加模态框*/}\r\n                    <Modal title={<div style={{width: \"100%\", cursor: \"move\"}} // 当鼠标移动到标题上时，鼠标变成十字\r\n                                       onMouseOver={() => { // 当鼠标移动进标题时，设置为可以拖拽\r\n                                           if (this.state.disabled) {\r\n                                               this.setState({\r\n                                                   disabled: false // 将不可拖拽关掉\r\n                                               })\r\n                                           }\r\n                                       }}\r\n                                       onMouseOut={() => { // 当鼠标移动出标题时，设置不可拖拽\r\n                                           this.setState({\r\n                                               disabled: true // 打开不可拖拽\r\n                                           })\r\n                                       }}>添加类别</div>}\r\n                           visible={this.state.addVisiable}\r\n                           centered={true}\r\n                           okText={\"提交\"}\r\n                           cancelText={\"取消\"}\r\n                           onCancel={this.handleCancel}\r\n                           onOk={this.confirmAdd}\r\n                           destroyOnClose={true}\r\n                           modalRender={modal => (\r\n                               <Draggable disabled={this.state.disabled} bounds={this.state.bounds}\r\n                                          onStart={(event, uiData) => this.onStart(event, uiData)}>\r\n                                   <div ref={this.draggleRef}>{modal}</div>\r\n                               </Draggable>\r\n                           )}>\r\n                        <Form ref={this.addRef}>\r\n                            <Form.Item name={\"name\"} label={\"类别名称\"} rules={[{required: true, message: \"请输入类别名称\"}]}>\r\n                                <Input/>\r\n                            </Form.Item>\r\n                            <Form.Item name={\"img\"} label={\"类别标识\"} rules={[{required: true}]}>\r\n                                <Upload action={`${HOST}:${PORT}/cate/upload`}\r\n                                        name={\"img\"}\r\n                                        listType={\"picture-card\"}\r\n                                        fileList={this.state.fileList}\r\n                                        onChange={this.handleImageChange}\r\n                                        data={file => ({photoContent: file})}\r\n                                        onPreview={this.handlePreview}\r\n                                        beforeUpload={this.beforeUpload}\r\n                                        maxCount={1}>\r\n                                    {this.state.fileList.length > 1 ? null : uploadButton}\r\n                                </Upload>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                    {/*编辑模态框*/}\r\n                    <Modal title={<div style={{width: \"100%\", cursor: \"move\"}} // 当鼠标移动到标题上时，鼠标变成十字\r\n                                       onMouseOver={() => { // 当鼠标移动进标题时，设置为可以拖拽\r\n                                           if (this.state.disabled) {\r\n                                               this.setState({\r\n                                                   disabled: false // 将不可拖拽关掉\r\n                                               })\r\n                                           }\r\n                                       }}\r\n                                       onMouseOut={() => { // 当鼠标移动出标题时，设置不可拖拽\r\n                                           this.setState({\r\n                                               disabled: true // 打开不可拖拽\r\n                                           })\r\n                                       }}>编辑类别</div>}\r\n                           visible={this.state.editVisiable}\r\n                           centered={true}\r\n                           okText={\"提交\"}\r\n                           cancelText={\"取消\"}\r\n                           onCancel={this.handleCancel}\r\n                           onOk={this.confirmEdit}\r\n                           destroyOnClose={true}\r\n                           modalRender={modal => (\r\n                               <Draggable disabled={this.state.disabled} bounds={this.state.bounds}\r\n                                          onStart={(event, uiData) => this.onStart(event, uiData)}>\r\n                                   <div ref={this.draggleRef}>{modal}</div>\r\n                               </Draggable>\r\n                           )}>\r\n                        <Form ref={this.editRef}>\r\n                            <Form.Item name={\"name\"} label={\"类别名称\"} rules={[{required: true, message: \"请输入类别名称\"}]}\r\n                                       initialValue={this.state.editInfo.name}>\r\n                                <Input/>\r\n                            </Form.Item>\r\n                            <Form.Item name={\"img\"} label={\"类别标识\"} rules={[{required: true}]}>\r\n                                <Upload action={`${HOST}:${PORT}/cate/upload`}\r\n                                        name={\"img\"}\r\n                                        listType={\"picture-card\"}\r\n                                        fileList={this.state.fileList}\r\n                                        onChange={this.handleImageChange}\r\n                                        data={file => ({photoContent: file})}\r\n                                        onPreview={this.handlePreview}\r\n                                        beforeUpload={this.beforeUpload}\r\n                                        maxCount={1}>\r\n                                    {this.state.fileList.length > 1 ? null : uploadButton}\r\n                                </Upload>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Modal>\r\n                </div>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cate;","E:\\装修小程序\\decorate\\src\\components\\article.js",["113"],[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":20},{"ruleId":"118","severity":1,"message":"122","line":7,"column":9,"nodeType":"120","messageId":"121","endLine":7,"endColumn":22},{"ruleId":"118","severity":1,"message":"123","line":3,"column":9,"nodeType":"120","messageId":"121","endLine":3,"endColumn":22},{"ruleId":"124","severity":1,"message":"125","line":33,"column":21,"nodeType":"126","endLine":33,"endColumn":24},{"ruleId":"124","severity":1,"message":"125","line":86,"column":29,"nodeType":"126","endLine":87,"endColumn":73},{"ruleId":"118","severity":1,"message":"127","line":7,"column":24,"nodeType":"120","messageId":"121","endLine":7,"endColumn":31},{"ruleId":"118","severity":1,"message":"128","line":7,"column":33,"nodeType":"120","messageId":"121","endLine":7,"endColumn":38},{"ruleId":"118","severity":1,"message":"129","line":9,"column":9,"nodeType":"120","messageId":"121","endLine":9,"endColumn":16},{"ruleId":"118","severity":1,"message":"130","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":13},{"ruleId":"118","severity":1,"message":"131","line":2,"column":9,"nodeType":"120","messageId":"121","endLine":2,"endColumn":18},{"ruleId":"118","severity":1,"message":"132","line":3,"column":44,"nodeType":"120","messageId":"121","endLine":3,"endColumn":49},{"ruleId":"118","severity":1,"message":"127","line":5,"column":9,"nodeType":"120","messageId":"121","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"128","line":5,"column":18,"nodeType":"120","messageId":"121","endLine":5,"endColumn":23},{"ruleId":"118","severity":1,"message":"133","line":8,"column":24,"nodeType":"120","messageId":"121","endLine":8,"endColumn":30},{"ruleId":"118","severity":1,"message":"134","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":13},{"ruleId":"118","severity":1,"message":"135","line":3,"column":9,"nodeType":"120","messageId":"121","endLine":3,"endColumn":16},{"ruleId":"118","severity":1,"message":"136","line":3,"column":55,"nodeType":"120","messageId":"121","endLine":3,"endColumn":65},{"ruleId":"137","severity":1,"message":"138","line":94,"column":40,"nodeType":"139","messageId":"140","endLine":94,"endColumn":42},{"ruleId":"137","severity":1,"message":"138","line":219,"column":27,"nodeType":"139","messageId":"140","endLine":219,"endColumn":29},{"ruleId":"137","severity":1,"message":"138","line":231,"column":23,"nodeType":"139","messageId":"140","endLine":231,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":260,"column":40,"nodeType":"139","messageId":"140","endLine":260,"endColumn":42},{"ruleId":"137","severity":1,"message":"138","line":90,"column":33,"nodeType":"139","messageId":"140","endLine":90,"endColumn":35},{"ruleId":"137","severity":1,"message":"138","line":90,"column":65,"nodeType":"139","messageId":"140","endLine":90,"endColumn":67},{"ruleId":"137","severity":1,"message":"138","line":90,"column":83,"nodeType":"139","messageId":"140","endLine":90,"endColumn":85},{"ruleId":"137","severity":1,"message":"138","line":90,"column":120,"nodeType":"139","messageId":"140","endLine":90,"endColumn":122},{"ruleId":"137","severity":1,"message":"138","line":205,"column":18,"nodeType":"139","messageId":"140","endLine":205,"endColumn":20},{"ruleId":"137","severity":1,"message":"138","line":207,"column":19,"nodeType":"139","messageId":"140","endLine":207,"endColumn":21},{"ruleId":"141","severity":1,"message":"142","line":246,"column":49,"nodeType":"139","messageId":"143","endLine":246,"endColumn":50},{"ruleId":"141","severity":1,"message":"142","line":246,"column":71,"nodeType":"139","messageId":"143","endLine":246,"endColumn":72},{"ruleId":"137","severity":1,"message":"138","line":164,"column":40,"nodeType":"139","messageId":"140","endLine":164,"endColumn":42},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'PrivateRoute' is defined but never used.","Identifier","unusedVar","'Administrator' is defined but never used.","'BrowserRouter' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'NavLink' is defined but never used.","'Route' is defined but never used.","'Findpwd' is defined but never used.","'axios' is defined but never used.","'Component' is defined but never used.","'Modal' is defined but never used.","'Switch' is defined but never used.","'Login' is defined but never used.","'BackTop' is defined but never used.","'Pagination' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation"]