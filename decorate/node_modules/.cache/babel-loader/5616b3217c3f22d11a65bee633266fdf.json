{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertRawToEditorState = exports.convertEditorStateToRaw = exports.convertHTMLToEditorState = exports.convertEditorStateToHTML = exports.convertHTMLToRaw = exports.convertRawToHTML = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _draftConvert = require('draft-convert');\n\nvar _configs = require('./configs');\n\nvar _draftJs = require('draft-js');\n\nvar defaultConvertOptions = {\n  fontFamilies: _configs.defaultFontFamilies\n};\n\nvar convertRawToHTML = exports.convertRawToHTML = function convertRawToHTML(rawContent, options) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    var contentState = (0, _draftJs.convertFromRaw)(rawContent);\n    options.contentState = contentState;\n    return (0, _draftConvert.convertToHTML)((0, _configs.getToHTMLConfig)(options))(contentState);\n  } catch (error) {\n    console.warn(error);\n    return '';\n  }\n};\n\nvar convertHTMLToRaw = exports.convertHTMLToRaw = function convertHTMLToRaw(HTMLString, options, source) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    var contentState = (0, _draftConvert.convertFromHTML)((0, _configs.getFromHTMLConfig)(options, source))(HTMLString);\n    return (0, _draftJs.convertToRaw)(contentState);\n  } catch (error) {\n    console.warn(error);\n    return {};\n  }\n};\n\nvar convertEditorStateToHTML = exports.convertEditorStateToHTML = function convertEditorStateToHTML(editorState, options) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    var contentState = editorState.getCurrentContent();\n    options.contentState = contentState;\n    return (0, _draftConvert.convertToHTML)((0, _configs.getToHTMLConfig)(options))(contentState);\n  } catch (error) {\n    console.warn(error);\n    return '';\n  }\n};\n\nvar convertHTMLToEditorState = exports.convertHTMLToEditorState = function convertHTMLToEditorState(HTMLString, editorDecorators, options, source) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    return _draftJs.EditorState.createWithContent((0, _draftConvert.convertFromHTML)((0, _configs.getFromHTMLConfig)(options, source))(HTMLString), editorDecorators);\n  } catch (error) {\n    console.warn(error);\n    return _draftJs.EditorState.createEmpty(editorDecorators);\n  }\n};\n\nvar convertEditorStateToRaw = exports.convertEditorStateToRaw = function convertEditorStateToRaw(editorState) {\n  return (0, _draftJs.convertToRaw)(editorState.getCurrentContent());\n};\n\nvar convertRawToEditorState = exports.convertRawToEditorState = function convertRawToEditorState(rawContent, editorDecorators) {\n  try {\n    return _draftJs.EditorState.createWithContent((0, _draftJs.convertFromRaw)(rawContent), editorDecorators);\n  } catch (error) {\n    console.warn(error);\n    return _draftJs.EditorState.createEmpty(editorDecorators);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,wBAAwB;AAC5BC;AAD4B,CAA9B;;AAIO,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAAaC,OAAb,EAAyB;AAEvDA,yBAAeJ,qBAAfI,EAAyCA,OAAzCA;;AAEA,MAAI;AACF,QAAMC,eAAe,6BAAeF,UAAf,CAArB;AACAC,YAAQC,YAARD,GAAuBC,YAAvBD;AACA,WAAO,iCAAc,8BAAgBA,OAAhB,CAAd,EAAwCC,YAAxC,CAAP;AAHF,IAIE,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAARD,CAAaD,KAAbC;AACA,WAAO,EAAP;AACD;AAXI;;AAeA,IAAME,8CAAmB,SAAnBA,gBAAmB,CAACC,UAAD,EAAaN,OAAb,EAAsBO,MAAtB,EAAiC;AAE/DP,yBAAeJ,qBAAfI,EAAyCA,OAAzCA;;AAEA,MAAI;AACF,QAAMC,eAAe,mCAAgB,gCAAkBD,OAAlB,EAA2BO,MAA3B,CAAhB,EAAoDD,UAApD,CAArB;AACA,WAAO,2BAAaL,YAAb,CAAP;AAFF,IAGE,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAARD,CAAaD,KAAbC;AACA,WAAO,EAAP;AACD;AAVI;;AAcA,IAAMK,8DAA2B,SAA3BA,wBAA2B,CAACC,WAAD,EAAcT,OAAd,EAA0B;AAEhEA,yBAAeJ,qBAAfI,EAAyCA,OAAzCA;;AAEA,MAAI;AACF,QAAMC,eAAeQ,YAAYC,iBAAZD,EAArB;AACAT,YAAQC,YAARD,GAAuBC,YAAvBD;AACA,WAAO,iCAAc,8BAAgBA,OAAhB,CAAd,EAAwCC,YAAxC,CAAP;AAHF,IAIE,OAAOC,KAAP,EAAc;AACdC,YAAQC,IAARD,CAAaD,KAAbC;AACA,WAAO,EAAP;AACD;AAXI;;AAeA,IAAMQ,8DAA2B,SAA3BA,wBAA2B,CAACL,UAAD,EAAaM,gBAAb,EAA+BZ,OAA/B,EAAwCO,MAAxC,EAAmD;AAEzFP,yBAAeJ,qBAAfI,EAAyCA,OAAzCA;;AAEA,MAAI;AACF,WAAOa,qBAAYC,iBAAZ,CAA8B,mCAAgB,gCAAkBd,OAAlB,EAA2BO,MAA3B,CAAhB,EAAoDD,UAApD,CAA9B,EAA+FM,gBAA/F,CAAP;AADF,IAEE,OAAOV,KAAP,EAAc;AACdC,YAAQC,IAARD,CAAaD,KAAbC;AACA,WAAOU,qBAAYE,WAAZ,CAAwBH,gBAAxB,CAAP;AACD;AATI;;AAaA,IAAMI,4DAA0B,SAA1BA,uBAA0B,CAACP,WAAD,EAAiB;AACtD,SAAO,2BAAaA,YAAYC,iBAAZD,EAAb,CAAP;AADK;;AAIA,IAAMQ,4DAA0B,SAA1BA,uBAA0B,CAAClB,UAAD,EAAaa,gBAAb,EAAkC;AAEvE,MAAI;AACF,WAAOC,qBAAYC,iBAAZ,CAA8B,6BAAef,UAAf,CAA9B,EAA0Da,gBAA1D,CAAP;AADF,IAEE,OAAOV,KAAP,EAAc;AACdC,YAAQC,IAARD,CAAaD,KAAbC;AACA,WAAOU,qBAAYE,WAAZ,CAAwBH,gBAAxB,CAAP;AACD;AAPI","names":["defaultConvertOptions","fontFamilies","convertRawToHTML","rawContent","options","contentState","error","console","warn","convertHTMLToRaw","HTMLString","source","convertEditorStateToHTML","editorState","getCurrentContent","convertHTMLToEditorState","editorDecorators","_draftJs","createWithContent","createEmpty","convertEditorStateToRaw","convertRawToEditorState"],"sources":["E:\\装修小程序\\decorate\\node_modules\\braft-editor\\node_modules\\braft-convert\\src\\index.js"],"sourcesContent":["import { convertToHTML, convertFromHTML } from 'draft-convert'\nimport { getToHTMLConfig, getFromHTMLConfig, defaultFontFamilies } from './configs'\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js'\n\nconst defaultConvertOptions = {\n  fontFamilies: defaultFontFamilies\n}\n\nexport const convertRawToHTML = (rawContent, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = convertFromRaw(rawContent)\n    options.contentState = contentState\n    return convertToHTML(getToHTMLConfig(options))(contentState)\n  } catch (error) {\n    console.warn(error)\n    return ''\n  }\n\n}\n\nexport const convertHTMLToRaw = (HTMLString, options, source) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = convertFromHTML(getFromHTMLConfig(options, source))(HTMLString)\n    return convertToRaw(contentState)\n  } catch (error) {\n    console.warn(error)\n    return {}\n  }\n\n}\n\nexport const convertEditorStateToHTML = (editorState, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = editorState.getCurrentContent()\n    options.contentState = contentState\n    return convertToHTML(getToHTMLConfig(options))(contentState)\n  } catch (error) {\n    console.warn(error)\n    return ''\n  }\n\n}\n\nexport const convertHTMLToEditorState = (HTMLString, editorDecorators, options, source) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    return EditorState.createWithContent(convertFromHTML(getFromHTMLConfig(options, source))(HTMLString), editorDecorators)\n  } catch (error) {\n    console.warn(error)\n    return EditorState.createEmpty(editorDecorators)\n  }\n\n}\n\nexport const convertEditorStateToRaw = (editorState) => {\n  return convertToRaw(editorState.getCurrentContent())\n}\n\nexport const convertRawToEditorState = (rawContent, editorDecorators) => {\n\n  try {\n    return EditorState.createWithContent(convertFromRaw(rawContent), editorDecorators)\n  } catch (error) {\n    console.warn(error)\n    return EditorState.createEmpty(editorDecorators)\n  }\n \n}"]},"metadata":{},"sourceType":"script"}