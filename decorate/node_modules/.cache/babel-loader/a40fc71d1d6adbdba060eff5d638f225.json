{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFromHTMLConfig = exports.getToHTMLConfig = exports.blocks = exports.getHexColor = exports.defaultFontFamilies = exports.namedColors = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar namedColors = exports.namedColors = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370d8\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#d87093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n};\n\nvar getStyleValue = function getStyleValue(style) {\n  return style.split('-')[1];\n};\n\nvar defaultUnitExportFn = function defaultUnitExportFn(unit) {\n  return unit + 'px';\n};\n\nvar defaultUnitImportFn = function defaultUnitImportFn(unit) {\n  return unit.replace('px', '');\n};\n\nvar ignoredNodeAttributes = ['style'];\nvar ignoredEntityNodeAttributes = ['style', 'href', 'target', 'alt', 'title', 'id', 'controls', 'autoplay', 'loop', 'poster'];\n\nvar spreadNodeAttributes = function spreadNodeAttributes(attributesObject) {\n  return Object.keys(attributesObject).reduce(function (attributeString, attributeName) {\n    return attributeString + \" \" + attributeName + \"=\\\"\" + attributesObject[attributeName] + \"\\\"\";\n  }, '').replace(/^\\s$/, '');\n};\n\nvar defaultFontFamilies = exports.defaultFontFamilies = [{\n  name: 'Araial',\n  family: 'Arial, Helvetica, sans-serif'\n}, {\n  name: 'Georgia',\n  family: 'Georgia, serif'\n}, {\n  name: 'Impact',\n  family: 'Impact, serif'\n}, {\n  name: 'Monospace',\n  family: '\"Courier New\", Courier, monospace'\n}, {\n  name: 'Tahoma',\n  family: \"tahoma, arial, 'Hiragino Sans GB', 宋体, sans-serif\"\n}];\n\nvar getHexColor = exports.getHexColor = function getHexColor(color) {\n  color = color.replace('color:', '').replace(';', '').replace(' ', '');\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color;\n  } else if (namedColors[color]) {\n    return namedColors[color];\n  } else if (color.indexOf('rgb') === 0) {\n    var rgbArray = color.split(',');\n    var convertedColor = rgbArray.length < 3 ? null : '#' + [rgbArray[0], rgbArray[1], rgbArray[2]].map(function (x) {\n      var hex = parseInt(x.replace(/\\D/g, ''), 10).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    }).join('');\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor) ? convertedColor : null;\n  } else {\n    return null;\n  }\n};\n\nvar blocks = exports.blocks = {\n  'header-one': 'h1',\n  'header-two': 'h2',\n  'header-three': 'h3',\n  'header-four': 'h4',\n  'header-five': 'h5',\n  'header-six': 'h6',\n  'unstyled': 'p',\n  'blockquote': 'blockquote'\n};\nvar blockTypes = Object.keys(blocks);\nvar blockNames = blockTypes.map(function (key) {\n  return blocks[key];\n});\n\nvar convertAtomicBlock = function convertAtomicBlock(block, contentState, blockNodeAttributes) {\n  if (!block || !block.key) {\n    return _react2.default.createElement(\"p\", null);\n  }\n\n  var contentBlock = contentState.getBlockForKey(block.key);\n\n  var className = blockNodeAttributes.class,\n      nodeAttrAsProps = _objectWithoutProperties(blockNodeAttributes, [\"class\"]);\n\n  nodeAttrAsProps.className = className;\n\n  if (!contentBlock) {\n    return _react2.default.createElement(\"p\", null);\n  }\n\n  var entityKey = contentBlock.getEntityAt(0);\n\n  if (!entityKey) {\n    return _react2.default.createElement(\"p\", null);\n  }\n\n  var entity = contentState.getEntity(entityKey);\n  var mediaType = entity.getType().toLowerCase();\n  var _block$data = block.data,\n      float = _block$data.float,\n      alignment = _block$data.alignment;\n\n  var _entity$getData = entity.getData(),\n      url = _entity$getData.url,\n      link = _entity$getData.link,\n      link_target = _entity$getData.link_target,\n      width = _entity$getData.width,\n      height = _entity$getData.height,\n      meta = _entity$getData.meta;\n\n  if (mediaType === 'image') {\n    var imageWrapStyle = {};\n    var styledClassName = '';\n\n    if (float) {\n      imageWrapStyle.float = float;\n      styledClassName += ' float-' + float;\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment;\n      styledClassName += ' align-' + alignment;\n    }\n\n    if (link) {\n      return _react2.default.createElement(\"div\", {\n        className: \"media-wrap image-wrap\" + styledClassName,\n        style: imageWrapStyle\n      }, _react2.default.createElement(\"a\", {\n        style: {\n          display: 'inline-block'\n        },\n        href: link,\n        target: link_target\n      }, _react2.default.createElement(\"img\", _extends({}, nodeAttrAsProps, meta, {\n        src: url,\n        width: width,\n        height: height,\n        style: {\n          width: width,\n          height: height\n        }\n      }))));\n    } else {\n      return _react2.default.createElement(\"div\", {\n        className: \"media-wrap image-wrap\" + styledClassName,\n        style: imageWrapStyle\n      }, _react2.default.createElement(\"img\", _extends({}, nodeAttrAsProps, meta, {\n        src: url,\n        width: width,\n        height: height,\n        style: {\n          width: width,\n          height: height\n        }\n      })));\n    }\n  } else if (mediaType === 'audio') {\n    return _react2.default.createElement(\"div\", {\n      className: \"media-wrap audio-wrap\"\n    }, _react2.default.createElement(\"audio\", _extends({\n      controls: true\n    }, nodeAttrAsProps, meta, {\n      src: url\n    })));\n  } else if (mediaType === 'video') {\n    return _react2.default.createElement(\"div\", {\n      className: \"media-wrap video-wrap\"\n    }, _react2.default.createElement(\"video\", _extends({\n      controls: true\n    }, nodeAttrAsProps, meta, {\n      src: url,\n      width: width,\n      height: height\n    })));\n  } else if (mediaType === 'embed') {\n    return _react2.default.createElement(\"div\", {\n      className: \"media-wrap embed-wrap\"\n    }, _react2.default.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: url\n      }\n    }));\n  } else if (mediaType === 'hr') {\n    return _react2.default.createElement(\"hr\", null);\n  } else {\n    return _react2.default.createElement(\"p\", null);\n  }\n};\n\nvar entityToHTML = function entityToHTML(options) {\n  return function (entity, originalText) {\n    var entityExportFn = options.entityExportFn;\n    var entityType = entity.type.toLowerCase();\n\n    if (entityExportFn) {\n      var customOutput = entityExportFn(entity, originalText);\n\n      if (customOutput) {\n        return customOutput;\n      }\n    }\n\n    if (entityType === 'link') {\n      var _ref = entity.data.nodeAttributes || {},\n          className = _ref.class,\n          nodeAttrAsProps = _objectWithoutProperties(_ref, [\"class\"]);\n\n      nodeAttrAsProps.className = className;\n      return _react2.default.createElement(\"a\", _extends({\n        href: entity.data.href,\n        target: entity.data.target\n      }, nodeAttrAsProps));\n    }\n  };\n};\n\nvar styleToHTML = function styleToHTML(options) {\n  return function (style) {\n    var unitExportFn = options.unitExportFn || defaultUnitExportFn;\n\n    if (options.styleExportFn) {\n      var customOutput = options.styleExportFn(style, options);\n\n      if (customOutput) {\n        return customOutput;\n      }\n    }\n\n    style = style.toLowerCase();\n\n    if (style === 'strikethrough') {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          textDecoration: 'line-through'\n        }\n      });\n    } else if (style === 'superscript') {\n      return _react2.default.createElement(\"sup\", null);\n    } else if (style === 'subscript') {\n      return _react2.default.createElement(\"sub\", null);\n    } else if (style.indexOf('color-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          color: '#' + getStyleValue(style)\n        }\n      });\n    } else if (style.indexOf('bgcolor-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          backgroundColor: '#' + getStyleValue(style)\n        }\n      });\n    } else if (style.indexOf('fontsize-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          fontSize: unitExportFn(getStyleValue(style), 'font-size', 'html')\n        }\n      });\n    } else if (style.indexOf('lineheight-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          lineHeight: unitExportFn(getStyleValue(style), 'line-height', 'html')\n        }\n      });\n    } else if (style.indexOf('letterspacing-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          letterSpacing: unitExportFn(getStyleValue(style), 'letter-spacing', 'html')\n        }\n      });\n    } else if (style.indexOf('fontfamily-') === 0) {\n      var fontFamily = options.fontFamilies.find(function (item) {\n        return item.name.toLowerCase() === getStyleValue(style);\n      });\n      if (!fontFamily) return;\n      return _react2.default.createElement(\"span\", {\n        style: {\n          fontFamily: fontFamily.family\n        }\n      });\n    }\n  };\n};\n\nvar blockToHTML = function blockToHTML(options) {\n  return function (block) {\n    var blockExportFn = options.blockExportFn,\n        contentState = options.contentState;\n\n    if (blockExportFn) {\n      var customOutput = blockExportFn(contentState, block);\n\n      if (customOutput) {\n        return customOutput;\n      }\n    }\n\n    var blockStyle = '';\n    var blockType = block.type.toLowerCase();\n    var _block$data2 = block.data,\n        textAlign = _block$data2.textAlign,\n        textIndent = _block$data2.textIndent,\n        _block$data2$nodeAttr = _block$data2.nodeAttributes,\n        nodeAttributes = _block$data2$nodeAttr === undefined ? {} : _block$data2$nodeAttr;\n    var attributeString = spreadNodeAttributes(nodeAttributes);\n\n    if (textAlign || textIndent) {\n      blockStyle = ' style=\"';\n\n      if (textAlign) {\n        blockStyle += \"text-align:\" + textAlign + \";\";\n      }\n\n      if (textIndent && !isNaN(textIndent) && textIndent > 0) {\n        blockStyle += \"text-indent:\" + textIndent * 2 + \"em;\";\n      }\n\n      blockStyle += '\"';\n    }\n\n    if (blockType === 'atomic') {\n      return convertAtomicBlock(block, contentState, nodeAttributes);\n    } else if (blockType === 'code-block') {\n      var previousBlock = contentState.getBlockBefore(block.key);\n      var nextBlock = contentState.getBlockAfter(block.key);\n      var previousBlockType = previousBlock && previousBlock.getType();\n      var nextBlockType = nextBlock && nextBlock.getType();\n      var start = '';\n      var end = '';\n\n      if (previousBlockType !== 'code-block') {\n        start = \"<pre\" + attributeString + \"><code>\";\n      } else {\n        start = '';\n      }\n\n      if (nextBlockType !== 'code-block') {\n        end = '</code></pre>';\n      } else {\n        end = '<br/>';\n      }\n\n      return {\n        start: start,\n        end: end\n      };\n    } else if (blocks[blockType]) {\n      return {\n        start: \"<\" + blocks[blockType] + blockStyle + attributeString + \">\",\n        end: \"</\" + blocks[blockType] + \">\"\n      };\n    } else if (blockType === 'unordered-list-item') {\n      return {\n        start: \"<li\" + blockStyle + attributeString + \">\",\n        end: '</li>',\n        nest: _react2.default.createElement(\"ul\", null)\n      };\n    } else if (blockType === 'ordered-list-item') {\n      return {\n        start: \"<li\" + blockStyle + attributeString + \">\",\n        end: '</li>',\n        nest: _react2.default.createElement(\"ol\", null)\n      };\n    }\n  };\n};\n\nvar htmlToStyle = function htmlToStyle(options, source) {\n  return function (nodeName, node, currentStyle) {\n    if (!node || !node.style) {\n      return currentStyle;\n    }\n\n    var unitImportFn = options.unitImportFn || defaultUnitImportFn;\n    var newStyle = currentStyle;\n    [].forEach.call(node.style, function (style) {\n      if (nodeName === 'span' && style === 'color') {\n        var color = getHexColor(node.style.color);\n        newStyle = color ? newStyle.add('COLOR-' + color.replace('#', '').toUpperCase()) : newStyle;\n      } else if (nodeName === 'span' && style === 'background-color') {\n        var _color = getHexColor(node.style.backgroundColor);\n\n        newStyle = _color ? newStyle.add('BGCOLOR-' + _color.replace('#', '').toUpperCase()) : newStyle;\n      } else if (nodeName === 'span' && style === 'font-size') {\n        newStyle = newStyle.add('FONTSIZE-' + unitImportFn(node.style.fontSize, 'font-size', source));\n      } else if (nodeName === 'span' && style === 'line-height' && !isNaN(parseFloat(node.style.lineHeight, 10))) {\n        newStyle = newStyle.add('LINEHEIGHT-' + unitImportFn(node.style.lineHeight, 'line-height', source));\n      } else if (nodeName === 'span' && style === 'letter-spacing' && !isNaN(parseFloat(node.style.letterSpacing, 10))) {\n        newStyle = newStyle.add('LETTERSPACING-' + unitImportFn(node.style.letterSpacing, 'letter-spacing', source));\n      } else if (nodeName === 'span' && style === 'text-decoration') {\n        if (node.style.textDecoration === 'line-through') {\n          newStyle = newStyle.add('STRIKETHROUGH');\n        } else if (node.style.textDecoration === 'underline') {\n          newStyle = newStyle.add('UNDERLINE');\n        }\n      } else if (nodeName === 'span' && style === 'font-family') {\n        var fontFamily = options.fontFamilies.find(function (item) {\n          return item.family.toLowerCase() === node.style.fontFamily.toLowerCase();\n        });\n        if (!fontFamily) return;\n        newStyle = newStyle.add('FONTFAMILY-' + fontFamily.name.toUpperCase());\n      }\n    });\n\n    if (nodeName === 'sup') {\n      newStyle = newStyle.add('SUPERSCRIPT');\n    } else if (nodeName === 'sub') {\n      newStyle = newStyle.add('SUBSCRIPT');\n    }\n\n    options.styleImportFn && (newStyle = options.styleImportFn(nodeName, node, newStyle, source) || newStyle);\n    return newStyle;\n  };\n};\n\nvar htmlToEntity = function htmlToEntity(options, source) {\n  return function (nodeName, node, createEntity) {\n    if (options && options.entityImportFn) {\n      var customInput = options.entityImportFn(nodeName, node, createEntity, source);\n\n      if (customInput) {\n        return customInput;\n      }\n    }\n\n    nodeName = nodeName.toLowerCase();\n    var alt = node.alt,\n        title = node.title,\n        id = node.id,\n        controls = node.controls,\n        autoplay = node.autoplay,\n        loop = node.loop,\n        poster = node.poster;\n    var meta = {};\n    var nodeAttributes = {};\n    id && (meta.id = id);\n    alt && (meta.alt = alt);\n    title && (meta.title = title);\n    controls && (meta.controls = controls);\n    autoplay && (meta.autoPlay = autoplay);\n    loop && (meta.loop = loop);\n    poster && (meta.poster = poster);\n    node.attributes && Object.keys(node.attributes).forEach(function (key) {\n      var attr = node.attributes[key];\n      ignoredEntityNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n    });\n\n    if (nodeName === 'a' && !node.querySelectorAll('img').length) {\n      var href = node.getAttribute('href');\n\n      var _target = node.getAttribute('target');\n\n      return createEntity('LINK', 'MUTABLE', {\n        href: href,\n        target: _target,\n        nodeAttributes: nodeAttributes\n      });\n    } else if (nodeName === 'audio') {\n      return createEntity('AUDIO', 'IMMUTABLE', {\n        url: node.getAttribute('src'),\n        meta: meta,\n        nodeAttributes: nodeAttributes\n      });\n    } else if (nodeName === 'video') {\n      return createEntity('VIDEO', 'IMMUTABLE', {\n        url: node.getAttribute('src'),\n        meta: meta,\n        nodeAttributes: nodeAttributes\n      });\n    } else if (nodeName === 'img') {\n      var parentNode = node.parentNode;\n      var entityData = {\n        meta: meta\n      };\n      var _node$style = node.style,\n          width = _node$style.width,\n          height = _node$style.height;\n      entityData.url = node.getAttribute('src');\n      width && (entityData.width = width);\n      height && (entityData.height = height);\n\n      if (parentNode.nodeName.toLowerCase() === 'a') {\n        entityData.link = parentNode.getAttribute('href');\n        entityData.link_target = parentNode.getAttribute('target');\n      }\n\n      return createEntity('IMAGE', 'IMMUTABLE', entityData);\n    } else if (nodeName === 'hr') {\n      return createEntity('HR', 'IMMUTABLE', {});\n    } else if (node.parentNode && node.parentNode.classList.contains('embed-wrap')) {\n      var embedContent = node.innerHTML || node.outerHTML;\n\n      if (embedContent) {\n        return createEntity('EMBED', 'IMMUTABLE', {\n          url: embedContent\n        });\n      }\n    }\n  };\n};\n\nvar htmlToBlock = function htmlToBlock(options, source) {\n  return function (nodeName, node) {\n    if (options && options.blockImportFn) {\n      var customInput = options.blockImportFn(nodeName, node, source);\n\n      if (customInput) {\n        return customInput;\n      }\n    }\n\n    var nodeAttributes = {};\n    var nodeStyle = node.style || {};\n    node.attributes && Object.keys(node.attributes).forEach(function (key) {\n      var attr = node.attributes[key];\n      ignoredNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n    });\n\n    if (node.classList && node.classList.contains('media-wrap')) {\n      return {\n        type: 'atomic',\n        data: {\n          nodeAttributes: nodeAttributes,\n          float: nodeStyle.float,\n          alignment: nodeStyle.textAlign\n        }\n      };\n    } else if (nodeName === 'img') {\n      return {\n        type: 'atomic',\n        data: {\n          nodeAttributes: nodeAttributes,\n          float: nodeStyle.float,\n          alignment: nodeStyle.textAlign\n        }\n      };\n    } else if (nodeName === 'hr') {\n      return {\n        type: 'atomic',\n        data: {\n          nodeAttributes: nodeAttributes\n        }\n      };\n    } else if (nodeName === 'pre') {\n      node.innerHTML = node.innerHTML.replace(/<code(.*?)>/g, '').replace(/<\\/code>/g, '');\n      return {\n        type: 'code-block',\n        data: {\n          nodeAttributes: nodeAttributes\n        }\n      };\n    } else if (blockNames.indexOf(nodeName) !== -1) {\n      var blockData = {\n        nodeAttributes: nodeAttributes\n      };\n\n      if (nodeStyle.textAlign) {\n        blockData.textAlign = nodeStyle.textAlign;\n      }\n\n      if (nodeStyle.textIndent) {\n        blockData.textIndent = /^\\d+em$/.test(nodeStyle.textIndent) ? Math.ceil(parseInt(nodeStyle.textIndent, 10) / 2) : 1;\n      }\n\n      return {\n        type: blockTypes[blockNames.indexOf(nodeName)],\n        data: blockData\n      };\n    }\n  };\n};\n\nvar getToHTMLConfig = exports.getToHTMLConfig = function getToHTMLConfig(options) {\n  return {\n    styleToHTML: styleToHTML(options),\n    entityToHTML: entityToHTML(options),\n    blockToHTML: blockToHTML(options)\n  };\n};\n\nvar getFromHTMLConfig = exports.getFromHTMLConfig = function getFromHTMLConfig(options) {\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unknow';\n  return {\n    htmlToStyle: htmlToStyle(options, source),\n    htmlToEntity: htmlToEntity(options, source),\n    htmlToBlock: htmlToBlock(options, source)\n  };\n};","map":{"version":3,"mappings":"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","names":["namedColors","getStyleValue","style","split","defaultUnitExportFn","unit","defaultUnitImportFn","replace","ignoredNodeAttributes","ignoredEntityNodeAttributes","spreadNodeAttributes","attributesObject","Object","keys","reduce","attributeString","attributeName","defaultFontFamilies","name","family","getHexColor","color","test","indexOf","rgbArray","convertedColor","length","map","hex","parseInt","x","toString","join","blocks","blockTypes","blockNames","key","convertAtomicBlock","block","contentState","blockNodeAttributes","_react2","contentBlock","getBlockForKey","className","class","nodeAttrAsProps","entityKey","getEntityAt","entity","getEntity","mediaType","getType","toLowerCase","data","float","alignment","getData","url","link","link_target","width","height","meta","imageWrapStyle","styledClassName","textAlign","display","href","target","src","controls","dangerouslySetInnerHTML","__html","entityToHTML","options","originalText","entityExportFn","entityType","type","customOutput","nodeAttributes","styleToHTML","unitExportFn","styleExportFn","textDecoration","backgroundColor","fontSize","lineHeight","letterSpacing","fontFamily","fontFamilies","find","item","blockToHTML","blockExportFn","blockStyle","blockType","textIndent","isNaN","previousBlock","getBlockBefore","nextBlock","getBlockAfter","previousBlockType","nextBlockType","start","end","nest","htmlToStyle","source","nodeName","node","currentStyle","unitImportFn","newStyle","forEach","call","add","toUpperCase","parseFloat","styleImportFn","htmlToEntity","createEntity","entityImportFn","customInput","alt","title","id","autoplay","loop","poster","autoPlay","attributes","attr","value","querySelectorAll","getAttribute","parentNode","entityData","classList","contains","embedContent","innerHTML","outerHTML","htmlToBlock","blockImportFn","nodeStyle","blockData","Math","ceil","getToHTMLConfig","getFromHTMLConfig"],"sources":["E:\\装修小程序\\decorate\\node_modules\\braft-editor\\node_modules\\braft-convert\\src\\configs.js"],"sourcesContent":["import React from 'react'\n\nexport const namedColors = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370d8\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#d87093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n}\n\nconst getStyleValue = style => style.split('-')[1]\nconst defaultUnitExportFn = unit => unit + 'px'\nconst defaultUnitImportFn = unit => unit.replace('px', '')\n\nconst ignoredNodeAttributes = ['style']\nconst ignoredEntityNodeAttributes = ['style', 'href', 'target', 'alt', 'title', 'id', 'controls', 'autoplay', 'loop', 'poster']\n\nconst spreadNodeAttributes = (attributesObject) => {\n  return Object.keys(attributesObject).reduce((attributeString, attributeName) => {\n    return `${attributeString} ${attributeName}=\"${attributesObject[attributeName]}\"`\n  }, '').replace(/^\\s$/, '')\n}\n\nexport const defaultFontFamilies = [{\n    name: 'Araial',\n    family: 'Arial, Helvetica, sans-serif'\n  }, {\n    name: 'Georgia',\n    family: 'Georgia, serif'\n  }, {\n    name: 'Impact',\n    family: 'Impact, serif'\n  }, {\n    name: 'Monospace',\n    family: '\"Courier New\", Courier, monospace'\n  }, {\n    name: 'Tahoma',\n    family: \"tahoma, arial, 'Hiragino Sans GB', 宋体, sans-serif\"\n}]\n\nexport const getHexColor = (color) => {\n\n  color = color.replace('color:', '').replace(';', '').replace(' ', '')\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color\n  } else if (namedColors[color]) {\n    return namedColors[color]\n  } else if (color.indexOf('rgb') === 0) {\n\n    let rgbArray = color.split(',')\n    let convertedColor = rgbArray.length < 3 ? null : '#' + [rgbArray[0], rgbArray[1], rgbArray[2]].map(x => {\n      const hex = parseInt(x.replace(/\\D/g, ''), 10).toString(16)\n      return hex.length === 1 ? '0' + hex : hex\n    }).join('')\n\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor) ? convertedColor : null\n\n  } else {\n    return null\n  }\n\n}\n\nexport const blocks = {\n  'header-one': 'h1',\n  'header-two': 'h2',\n  'header-three': 'h3',\n  'header-four': 'h4',\n  'header-five': 'h5',\n  'header-six': 'h6',\n  'unstyled': 'p',\n  'blockquote': 'blockquote'\n}\n\nconst blockTypes = Object.keys(blocks)\nconst blockNames = blockTypes.map(key => blocks[key])\n\nconst convertAtomicBlock = (block, contentState, blockNodeAttributes) => {\n\n  if (!block || !block.key) {\n    return <p></p>\n  }\n\n  const contentBlock = contentState.getBlockForKey(block.key)\n\n  let { class: className, ...nodeAttrAsProps } = blockNodeAttributes\n  nodeAttrAsProps.className = className\n\n  if (!contentBlock) {\n    return <p></p>\n  }\n\n  const entityKey = contentBlock.getEntityAt(0)\n\n  if (!entityKey) {\n    return <p></p>\n  }\n\n  const entity = contentState.getEntity(entityKey)\n  const mediaType = entity.getType().toLowerCase()\n\n  let { float, alignment } = block.data\n  let { url, link, link_target, width, height, meta } = entity.getData()\n\n  if (mediaType === 'image') {\n\n    let imageWrapStyle = {}\n    let styledClassName = ''\n\n    if (float) {\n      imageWrapStyle.float = float\n      styledClassName += ' float-' + float\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment\n      styledClassName += ' align-' + alignment\n    }\n\n    if (link) {\n      return (\n        <div className={\"media-wrap image-wrap\" + styledClassName} style={imageWrapStyle}>\n          <a style={{display:'inline-block'}} href={link} target={link_target}>\n            <img {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} style={{width, height}} />\n          </a>\n        </div>\n      )\n    } else {\n      return (\n        <div className={\"media-wrap image-wrap\" + styledClassName} style={imageWrapStyle}>\n          <img {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} style={{width, height}}/>\n        </div>\n      )\n    }\n\n  } else if (mediaType === 'audio') {\n    return <div className=\"media-wrap audio-wrap\"><audio controls {...nodeAttrAsProps} {...meta} src={url} /></div>\n  } else if (mediaType === 'video') {\n    return <div className=\"media-wrap video-wrap\"><video controls {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} /></div>\n  } else if (mediaType === 'embed') {\n    return <div className=\"media-wrap embed-wrap\"><div dangerouslySetInnerHTML={{__html: url}}/></div>\n  } else if (mediaType === 'hr') {\n    return <hr></hr>\n  } else {\n    return <p></p>\n  }\n\n}\n\nconst entityToHTML = (options) => (entity, originalText) => {\n\n  const { entityExportFn } = options\n  const entityType = entity.type.toLowerCase()\n\n  if (entityExportFn) {\n    const customOutput = entityExportFn(entity, originalText)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  if (entityType === 'link') {\n    let { class: className, ...nodeAttrAsProps } = entity.data.nodeAttributes || {}\n    nodeAttrAsProps.className = className\n    return <a href={entity.data.href} target={entity.data.target} {...nodeAttrAsProps}/>\n  }\n\n}\n\nconst styleToHTML = (options) => (style) => {\n\n  const unitExportFn = options.unitExportFn || defaultUnitExportFn\n\n  if (options.styleExportFn) {\n    const customOutput = options.styleExportFn(style, options)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  style = style.toLowerCase()\n\n  if (style === 'strikethrough') {\n    return <span style={{textDecoration: 'line-through'}}/>\n  } else if (style === 'superscript') {\n    return <sup/>\n  } else if (style === 'subscript') {\n    return <sub/>\n  } else if (style.indexOf('color-') === 0) {\n    return <span style={{color: '#' + getStyleValue(style)}}/>\n  } else if (style.indexOf('bgcolor-') === 0) {\n    return <span style={{backgroundColor: '#' + getStyleValue(style)}}/>\n  } else if (style.indexOf('fontsize-') === 0) {\n    return <span style={{fontSize: unitExportFn(getStyleValue(style), 'font-size', 'html')}}/>\n  } else if (style.indexOf('lineheight-') === 0) {\n    return <span style={{lineHeight: unitExportFn(getStyleValue(style), 'line-height', 'html')}}/> \n  } else if (style.indexOf('letterspacing-') === 0) {\n    return <span style={{letterSpacing: unitExportFn(getStyleValue(style), 'letter-spacing', 'html')}}/>\n  } else if (style.indexOf('fontfamily-') === 0) {\n    let fontFamily = options.fontFamilies.find((item) => item.name.toLowerCase() === getStyleValue(style))\n    if (!fontFamily) return\n    return <span style={{fontFamily: fontFamily.family}}/>\n  }\n\n}\n\nconst blockToHTML = (options) => (block) => {\n\n  const { blockExportFn, contentState } = options\n\n  if (blockExportFn) {\n    const customOutput = blockExportFn(contentState, block)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  let blockStyle = ''\n\n  const blockType = block.type.toLowerCase()\n  const { textAlign, textIndent, nodeAttributes = {} } = block.data\n  const attributeString = spreadNodeAttributes(nodeAttributes)\n\n  if (textAlign || textIndent) {\n\n    blockStyle = ' style=\"'\n\n    if (textAlign) {\n      blockStyle += `text-align:${textAlign};`\n    }\n\n    if (textIndent && !isNaN(textIndent) && textIndent > 0) {\n      blockStyle += `text-indent:${textIndent * 2}em;`\n    }\n\n    blockStyle += '\"'\n\n  }\n\n  if (blockType === 'atomic') {\n    return convertAtomicBlock(block, contentState, nodeAttributes)\n  } else if (blockType === 'code-block') {\n\n    const previousBlock = contentState.getBlockBefore(block.key)\n    const nextBlock = contentState.getBlockAfter(block.key)\n    const previousBlockType = previousBlock && previousBlock.getType()\n    const nextBlockType = nextBlock && nextBlock.getType()\n\n    let start = ''\n    let end = ''\n\n    if (previousBlockType !== 'code-block') {\n      start = `<pre${attributeString}><code>`\n    } else {\n      start = ''\n    }\n\n    if (nextBlockType !== 'code-block') {\n      end = '</code></pre>'\n    } else {\n      end = '<br/>'\n    }\n\n    return { start, end }\n\n  } else if (blocks[blockType]) {\n    return {\n      start: `<${blocks[blockType]}${blockStyle}${attributeString}>`,\n      end: `</${blocks[blockType]}>`\n    }\n  } else if (blockType === 'unordered-list-item') {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: '</li>',\n      nest: <ul/>\n    }\n  } else if (blockType === 'ordered-list-item') {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: '</li>',\n      nest: <ol/>\n    }\n  }\n\n}\n\nconst htmlToStyle = (options, source) => (nodeName, node, currentStyle) => {\n\n  if (!node || !node.style) {\n    return currentStyle\n  }\n\n  const unitImportFn = options.unitImportFn || defaultUnitImportFn\n  let newStyle = currentStyle;\n\n  [].forEach.call(node.style, (style) => {\n\n    if (nodeName === 'span' && style === 'color') {\n      let color = getHexColor(node.style.color)\n      newStyle = color ? newStyle.add('COLOR-' + color.replace('#', '').toUpperCase()) : newStyle\n    } else if (nodeName === 'span' && style === 'background-color') {\n      let color = getHexColor(node.style.backgroundColor)\n      newStyle = color ? newStyle.add('BGCOLOR-' + color.replace('#', '').toUpperCase()) : newStyle\n    } else if (nodeName === 'span' && style === 'font-size') {\n      newStyle = newStyle.add('FONTSIZE-' + unitImportFn(node.style.fontSize, 'font-size', source))\n    } else if (nodeName === 'span' && style === 'line-height' && !isNaN(parseFloat(node.style.lineHeight, 10))) {\n      newStyle = newStyle.add('LINEHEIGHT-' + unitImportFn(node.style.lineHeight, 'line-height', source))\n    } else if (nodeName === 'span' && style === 'letter-spacing' && !isNaN(parseFloat(node.style.letterSpacing, 10))) {\n      newStyle = newStyle.add('LETTERSPACING-' + unitImportFn(node.style.letterSpacing, 'letter-spacing', source))\n    } else if (nodeName === 'span' && style === 'text-decoration') {\n      if (node.style.textDecoration === 'line-through') {\n        newStyle = newStyle.add('STRIKETHROUGH')\n      } else if (node.style.textDecoration === 'underline') {\n        newStyle = newStyle.add('UNDERLINE')\n      }\n    } else if (nodeName === 'span' && style === 'font-family') {\n      let fontFamily = options.fontFamilies.find((item) => item.family.toLowerCase() === node.style.fontFamily.toLowerCase())\n      if (!fontFamily) return;\n      newStyle = newStyle.add('FONTFAMILY-' + fontFamily.name.toUpperCase())\n    }\n\n  })\n\n  if (nodeName === 'sup') {\n    newStyle = newStyle.add('SUPERSCRIPT')\n  } else if (nodeName === 'sub') {\n    newStyle = newStyle.add('SUBSCRIPT')\n  }\n\n  options.styleImportFn && (newStyle = options.styleImportFn(nodeName, node, newStyle, source) || newStyle)\n  return newStyle\n\n}\n\nconst htmlToEntity = (options, source) => (nodeName, node, createEntity) => {\n\n  if (options && options.entityImportFn) {\n    const customInput = options.entityImportFn(nodeName, node, createEntity, source)\n    if (customInput) {\n      return customInput\n    }\n  }\n\n  nodeName = nodeName.toLowerCase()\n\n  const { alt, title, id, controls, autoplay, loop, poster } = node\n  let meta = {}\n  let nodeAttributes = {}\n\n  id && (meta.id = id)\n  alt && (meta.alt = alt)\n  title && (meta.title = title)\n  controls && (meta.controls = controls)\n  autoplay && (meta.autoPlay = autoplay)\n  loop && (meta.loop = loop)\n  poster && (meta.poster = poster)\n\n  node.attributes && Object.keys(node.attributes).forEach((key) => {\n    let attr = node.attributes[key]\n    ignoredEntityNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n  })\n\n  if (nodeName === 'a' && !node.querySelectorAll('img').length) {\n    let href = node.getAttribute('href')\n    let target = node.getAttribute('target')\n    return createEntity('LINK', 'MUTABLE',{ href, target, nodeAttributes })\n  } else if (nodeName === 'audio') {\n    return createEntity('AUDIO', 'IMMUTABLE',{ url: node.getAttribute('src'), meta, nodeAttributes }) \n  } else if (nodeName === 'video') {\n    return createEntity('VIDEO', 'IMMUTABLE',{ url: node.getAttribute('src'), meta, nodeAttributes }) \n  } else if (nodeName === 'img') {\n\n    let parentNode = node.parentNode\n    let entityData = { meta }\n    let { width, height } = node.style\n\n    entityData.url = node.getAttribute('src')\n    width && (entityData.width = width)\n    height && (entityData.height = height)\n\n    if (parentNode.nodeName.toLowerCase() === 'a') {\n      entityData.link = parentNode.getAttribute('href')\n      entityData.link_target = parentNode.getAttribute('target')\n    }\n\n    return createEntity('IMAGE', 'IMMUTABLE', entityData) \n\n  } else if (nodeName === 'hr') {\n    return createEntity('HR', 'IMMUTABLE', {}) \n  } else if (node.parentNode && node.parentNode.classList.contains('embed-wrap')) {\n\n    const embedContent = node.innerHTML || node.outerHTML\n\n    if (embedContent) {\n      return createEntity('EMBED', 'IMMUTABLE', {\n        url: embedContent\n      })   \n    }\n\n  }\n\n}\n\nconst htmlToBlock = (options, source) => (nodeName, node) => {\n\n  if (options && options.blockImportFn) {\n    const customInput = options.blockImportFn(nodeName, node, source)\n    if (customInput) {\n      return customInput\n    }\n  }\n\n  let nodeAttributes = {}\n  let nodeStyle = node.style || {}\n\n  node.attributes && Object.keys(node.attributes).forEach((key) => {\n    let attr = node.attributes[key]\n    ignoredNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n  })\n\n  if (node.classList && node.classList.contains('media-wrap')) {\n\n    return {\n      type: 'atomic',\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'img') {\n\n    return {\n      type: 'atomic',\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'hr') {\n\n    return {\n      type: 'atomic',\n      data: { nodeAttributes }\n    }\n\n  } else if (nodeName === 'pre') {\n\n    node.innerHTML = node.innerHTML.replace(/<code(.*?)>/g, '').replace(/<\\/code>/g, '')\n\n    return {\n      type: 'code-block',\n      data: { nodeAttributes }\n    }\n\n  } else if (blockNames.indexOf(nodeName) !== -1) {\n\n    const blockData = { nodeAttributes }\n\n    if (nodeStyle.textAlign) {\n      blockData.textAlign = nodeStyle.textAlign\n    }\n\n    if (nodeStyle.textIndent) {\n      blockData.textIndent = /^\\d+em$/.test(nodeStyle.textIndent) ? Math.ceil(parseInt(nodeStyle.textIndent, 10) / 2) : 1\n    }\n\n    return {\n      type: blockTypes[blockNames.indexOf(nodeName)],\n      data: blockData\n    }\n\n  }\n\n}\n\nexport const getToHTMLConfig = (options) => {\n\n  return {\n    styleToHTML: styleToHTML(options),\n    entityToHTML: entityToHTML(options),\n    blockToHTML: blockToHTML(options)\n  }\n\n}\n\nexport const getFromHTMLConfig = (options, source = 'unknow') => {\n\n  return { \n    htmlToStyle: htmlToStyle(options, source),\n    htmlToEntity: htmlToEntity(options, source),\n    htmlToBlock: htmlToBlock(options, source)\n  }\n\n}"]},"metadata":{},"sourceType":"script"}